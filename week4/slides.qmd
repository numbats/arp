---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 4: Debugging and profiing"
format:
  presentation-beamer:
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    keep-tex: true
---

```{r}
#| label: setup
#| include: false
#| cache: false
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Outline

\vspace*{0.4cm}
\tableofcontents

# Debugging

## Overall debugging strategy

* Google
* Stack Overflow
* Posit Community
* Create a minimal reproducible example
* Create a unit test
* Figure out where the test fails
* Fix it and test

## Minimal reproducible examples

* A minimal data set. Use a small built-in dataset, or make a small example.
* If you must include your own data, use `dput()`, but subset where possible.
* The *minimal* amount of code to reproduce the problem. Load only necessary packages.
* If the example involves random numbers, set the seed with `set.seed()`.
* Information about package versions, R version, OS. Use `sessioninfo::session_info()`.

## reprex

The **reprex** package helps create *minimal reproducible examples*.

* Results are saved to clipboard in form that can be pasted into a GitHub issue, Stack Overflow question, or email.
* `reprex::reprex()`: takes R code and outputs it in a markdown format.
* Append session info via\newline `reprex(..., session_info = TRUE)`.
* Use the RStudio addin.


## Debugging tools in R
\vspace*{-0.2cm}
\fontsize{14}{15}\sf

* `traceback`: prints out the function call stack after an error occurs; does nothing if there's no error.
* `debug`: flags a function for "debug" mode which allows you to step through execution of a function one line at a time.
* `undebug`: removes the "debug" flag from a function.
* `browser`: pauses execution of a function and puts the function in debug mode.
* `trace`: allows you to insert code into a function at a specific line number.
* `untrace`: removes the code inserted by `trace`.
* `recover`: allows you to modify the error behaviour so that you can browse the function call stack after an error occurs.

## Traceback

```{r, error = TRUE}
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
  if (!is.numeric(d)) stop("`d` must be numeric", call. = FALSE)
  d + 10
}
```

\only<1>{\includegraphics[width = 12cm]{../screenshots/debugging/rstudio-error.png}}
\only<2>{\includegraphics[width = 12cm]{../screenshots/debugging/rstudio-traceback.png}}
\pause\pause

```{r, eval = FALSE}
f("a")
#> Error: `d` must be numeric
traceback()
#> 5: stop("`d` must be numeric", call. = FALSE) at debugging.R#6
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f("a")
```

## Interactive debugging
\fontsize{13}{14}\sf

* Using `browser()`

  ```r
  i <- function(d) {
    browser()
    if (!is.numeric(d)) stop("`d` must be numeric", call. = FALSE)
    d + 10
  }
  ```

* Setting breakpoints
  * Similar to `browser()` but no change to source code.
  * Set in RStudio by clicking to left of line number, or pressing `Shift+F9`.
* `options(error = browser)`

## Interactive debugging

* `debug()` : inserts a `browser()` statement at start of function.
* `undebug()` : removes `browser()` statement.
* `debugonce()` : same as `debug()`, but removes `browser()` after first run.

## Exercises

1.  What's wrong with this code?\fontsize{10}{10}\sf

    ```{r, error = TRUE}
    # Multivariate scaling function
    mvscale <- function(object) {
      # Remove centers
      mat <- sweep(object, 2L, colMeans(object))
      # Scale and rotate
      S <- var(mat)
      U <- chol(solve(S))
      z <- mat %*% t(U)
      # Return orthogonalized data
      return(z)
    }
    mvscale(mtcars)
    ```

## Example
\vspace*{-0.15cm}
\centerline{\href{https://posit.co/resources/videos/debugging-techniques-in-rstudio-2/}{\includegraphics[width=16cm, height=20cm]{../screenshots/Amanda_Gadrow.png}}}

## Common error messages
\fontsize{12}{13}\sf

* could not find function `"xxxx"`
* object `xxxx` not found
* cannot open the connection / No such file or directory
* missing value where `TRUE` / `FALSE` needed
* unexpected `=` in `"xxxx"`
* attempt to apply non-function
* undefined columns selected
* subscript out of bounds
* object of type 'closure' is not subsettable
* `$` operator is invalid for atomic vectors
* list object cannot be coerced to type 'double'
* arguments imply differing number of rows
* non-numeric argument to binary operator

## Common warning messages
\fontsize{12}{13}\sf

* NAs introduced by coercion
* replacement has `xx` rows to replace `yy` rows
* number of items to replace is not a multiple of replacement length
* the condition has length > 1 and only the first element will be used
* longer object length is not a multiple of shorter object length
* package is not available for R version `xx`

## Non-interactive debugging

* Necessary for debugging code that runs in a non-interactive environment.
* Is the global environment different? Have you loaded different packages? Are objects left from previous sessions causing differences?
* Is the working directory different?
* Is the `PATH` environment variable, which determines where external commands (like `git`) are found, different?
* Is the `R_LIBS` environment variable, which determines where `library()` looks for packages, different?

## Non-interactive debugging

* `dump.frame()` saves state of R session to file.

  ```r
  # In batch R process ----
  dump_and_quit <- function() {
    # Save debugging info to file last.dump.rda
    dump.frames(to.file = TRUE)
    # Quit R with error status
    q(status = 1)
  }
  options(error = dump_and_quit)

  # In a later interactive session ----
  load("last.dump.rda")
  debugger()
  ```

* Last resort: `print()`: slow and primitive.

## Other tricks

* `sink()` : capture output to file.
* `options(warn = 2)` : turn warnings into errors.
* `rlang::with_abort()` : turn messages into errors.
* If R or RStudio crashes, it is probably a bug in compiled code.
* Post minimal reproducible example to Posit Community or Stack Overflow.

# Measuring performance

## Profiling functions

* `Rprof()` : records every function call.
* `summaryRprof()` : summarises the results.
* `profvis()` : visualises the results.

## Profiling

Where are the bottlenecks in your code?

```{r}
library(profvis)
library(bench)
f <- function() {
  pause(0.1)
  g()
  h()
}
g <- function() {
  pause(0.1)
  h()
}
h <- function() {
  pause(0.1)
}
```

## Profiling
\fontsize{10}{10}\sf

```{r, eval = FALSE}
tmp <- tempfile()
Rprof(tmp, interval = 0.1)
f()
Rprof(NULL)
writeLines(readLines(tmp))
#> sample.interval=100000
#> "pause" "g" "f"
#> "pause" "h" "g" "f"
#> "pause" "h" "f"
```

## Profiling
\fontsize{10}{10}\sf

```{r, eval=FALSE}
source(here::here("week4/profiling-example.R"))
profvis(f())
```

\vspace*{-0.5cm}
\centerline{\includegraphics[width = 7cm]{../screenshots/performance/flamegraph.png}}

## Microbenchmarking
\fontsize{10}{10}\sf

### `system.time()`

```{r}
x <- rnorm(1e6)
system.time(min(x))
system.time(sort(x)[1])
system.time(x[order(x)[1]])
```

## Microbenchmarking
\fontsize{10}{10}\sf

### `bench::mark()`

```{r}
bench::mark(
  min(x),
  sort(x)[1],
  x[order(x)[1]]
)
```

## Microbenchmarking

* `mem_alloc` tells you the memory allocated in the first run.
* `n_gc` tells you the total number of garbage collections over all runs.
* `n_itr` tells you how many times the expression was evaluated.
* Pay attention to the units!

## Exercises

2.  What's the fastest way to compute a square root? Compare:

    - `sqrt(x)`
    - `x^0.5`
    - `exp(log(x) / 2)`

    Use `system.time()` find the time for each operation.

    Repeat using `bench::mark()`. Why are they different?

# Improving performance

## Vectorization

* Vectorization is the process of converting a repeated operation into a vector operation.
* The loops in a vectorized function are implemented in C instead of R.
* Using `map()` or `apply()` is **not** vectorization.
* Matrix operations are vectorized, and usually very fast.

## Beware of over-vectorising

* Change all missing values in a data frame to zero:

  ```{r}
  #| eval: false
  x[is.na(x)] <- 0
  ```

  or

  ```{r}
  #| eval: false
  for(i in seq(NCOL(x))) {
    x[is.na(x[, i]), i] <- 0
  }
  ```

  Why might the second approach be preferred?

## Exercises

3. Write the following algorithm to estimate $\displaystyle\int_0^1 x^2 dx$ using vectorized code

### Monte Carlo Integration
   a. Initialise: `hits = 0`
   b. for i in 1:N
      * Generate two random numbers,  $U_1, U_2$, between 0 and 1
      * If $U_2 < U_1^2$, then `hits = hits + 1`
   c. end for
   d. Area estimate = hits/N

# Caching

## Caching: using rds

```{r}
#| eval: false
if (file.exists("results.rds")) {
  res <- readRDS("results.rds")
} else {
  res <- compute_it()  # a time-consuming function
  saveRDS(res, "results.rds")
}
```

\pause\vspace*{1cm}

\alert{Equivalently\dots}

```{r}
#| eval: false
res <- xfun::cache_rds(
  compute_it(), # a time-consuming function
  file = "results.rds"
)
```

## Caching: using rds
\fontsize{10}{10}\sf

```{r}
#| label: cache1
#| cache: false
#| freeze: false
compute <- function(...) {
    xfun::cache_rds(rnorm(6), file = "results.rds", ...)
}
compute()
compute()
```

```{r}
#| include: false
#| cache: false
# Need to explicitly remove results.rds for some reason when doing this in quarto
file.remove(here::here("cache/results.rds"))
```

```{r}
#| label: cache2
#| cache: false
#| freeze: false
compute(rerun = TRUE)
compute()
```

## Caching: Rmarkdown

````{verbatim}
```{r import-data, cache=TRUE}
d <- read.csv('my-precious.csv')
```

```{r analysis, dependson='import-data', cache=TRUE}
summary(d)
```
````

* Requires explicit dependencies or changes not detected.
* Changes to functions or packages not detected.
* Good practice to frequently clear cache to avoid problems.
* targets is a better solution: Week 8

## Caching: Quarto

````{verbatim}
```{r}
#| label: import-data
#| cache: true
d <- read.csv('my-precious.csv')
```

```{r}
#| label: analysis
#| dependson: import-data
#| cache: true
summary(d)
```
````

* Same problems as Rmarkdown
* targets is a better solution: Week 8

## Caching: memoise

Caching stores results of computations so they can be reused.

\fontsize{10}{10}\sf

```{r}
library(memoise)
sq <- function(x) {
  print("Computing square of 'x'")
  x**2
}
memo_sq <- memoise(sq)
memo_sq(2)
memo_sq(2)
```

## Exercises

4. Use `bench::mark()` to compare the speed of `sq()` and `memo_sq()`.
