{
  "hash": "177574738c0089c5f864f2066b2cb211",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming\nauthor: \"Week 3: R package development\"\nformat:\n  presentation-beamer:\n    fontsize: \"14pt,t\"\n    section-titles: false\n    knitr:\n      opts_chunk:\n        dev: \"cairo_pdf\"\n    fig-width: 7.5\n    fig-height: 3.5\n    include-in-header: ../header.tex\n    keep-tex: false\n---\n\n\n\n# Getting started\n\n## System setup\n\n```r\ninstall.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"knitr\"))\n```\n\n\\pause\n\n### R build toolchain\n\\vspace*{-0.2cm}\n* Windows: [`https://cran.r-project.org/bin/windows/Rtools/`](https://cran.r-project.org/bin/windows/Rtools/)\n* macOS: `xcode-select --install`\n* Linux: `sudo apt install r-base-dev`\n\n\\pause\n\n### Verify\n\\vspace*{-0.2cm}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools)\ndev_sitrep()\n```\n:::\n\n## Package states\n\n* **source**: the original files\n* **bundled**: some processing, and compressed to a single `.tar.gz` file (e.g., to upload to CRAN)\n* **binary**: what you usually download from CRAN\n* **installed**: decompressed binary file stored in package library\n* **in-memory**: loaded into R session using `library()`\n\n## Package states\n\n\\placefig{1}{1.1}{height = 7.9cm}{../diagrams/install-load.png}\n\n## Package structure\n\n\\placefig{3}{1.4}{height=7.6cm, trim = 30 420 740 200, clip = true}{../diagrams/package-development.pdf}\n\n## Package name\n\n* Only letters, numbers and periods.\n* Must start with a letter.\n* It cannot end with a period.\n* No hyphens or underscores.\n* Use the `available::available()` function to try ideas.\n\n## Package code is different\n\n* The `DESCRIPTION` file is the principal way to declare dependencies; we don’t do this via `library(somepackage)`.\n* Be explicit about which functions are user-facing and which are internal helpers. By default, functions are not exported.\n\n## Exercise: Start on a package\n\nWe will create a package that doubles numbers.\n\n1.  Create a new folder with package name and setup project file.\n\n2.  Create package skeleton\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    create_package()\n    ```\n    :::\n\n## Workflow\n\n\\placefig{1}{1.1}{height = 7.9cm}{../diagrams/workflow.png}\n\n## Workflow shortcuts\n\n* `install()` : Ctrl-Shift-B\n* `load_all()` : Ctrl-Shift-L\n* `document()` : Ctrl-Shift-D\n* `check()` : Ctrl-Shift-E\n* `test()` : Ctrl-Shift-T\n\n# Package metadata\n\n## DESCRIPTION file\n\\fontsize{10}{10}\\sf\n\n```\nPackage: doubler\nTitle: This package doubles numbers\nVersion: 0.0.0.9000\nAuthors@R:\n    person(\"Rob\", \"Hyndman\", , \"Rob.Hyndman@monash.edu\", role = c(\"aut\", \"cre\"))\nDescription: Whether the input is real, complex or character, this will double it.\nLicense: GPL (>= 3)\nEncoding: UTF-8\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.3.1\nSuggests:\n    testthat (>= 3.0.0)\nConfig/testthat/edition: 3\n```\n\n## DESCRIPTION file\n\n* **Title**: one line description. Plain text, title case, no more than 65 characters.\n* **Description**: Several sentences, one paragraph. 80 characters per line, 4 space indentation. Don't include the package name in the Title or Description. Do not start with \"This package does...\"\n* **Author**: Use `Authors@R` with `person()` for each author.\n* **Version**. `Major.Minor.Patch.9000`. The `9000` is a placeholder for development versions.\n* **License**: `GPL-3` or `MIT` are common.\n\n## DESCRIPTION file\n\n* **Depends**: packages that are attached with your package. (Not needed for most packages.)\n* **Imports**: packages that are used in your package. (Refer to functions using `pkg::fun()`.)\n* **Suggests**: packages that are used in your package, but not required. (E.g., in tests or examples.)\n* **LazyData**: `true` prevents users having to use `data()`.\n\n## DESCRIPTION file\n\nFunctions to help with the DESCRIPTION file:\n\n* `use_github()` or `use_github_links()`: set the GitHub repository, URL and BugReports.\n* `use_mit_license()`: set the license to MIT.\n* `use_gpl3_license()`: set the license to GPL-3.\n* `use_package()`: Add package to Imports or Suggests.\n* `use_data()`: Add data to your package.\n* `use_tidy_description()`: Clean up the DESCRIPTION file.\n\n## NAMESPACE file\n\n* Generated by `roxygen2`, so don't edit by hand.\n* `export()`: export a function (including S3 and S4 generics).\n* `S3method()`: export an S3 method.\n* `importFrom()`: import selected object from another namespace (including S4 generics).\n* `import()`: import all objects from another package’s namespace.\n* `useDynLib()`: registers routines from a DLL (this is specific to packages with compiled code).\n\n# Documentation\n\n## Documenting the package\n\n```r\nuse_package_doc()\n```\n\n## Documenting functions\n\n* Add roxygen2 comments to your `.R` files\n  * RStudio menu: `Code > Insert roxygen skeleton` (while cursor is within function)\n  * Or use Github Copilot (in RStudio or VS-Code)\n  * Or write them by hand\n* Then use `document()` to generate the `Rd` files and the `NAMESPACE` file. (Or press `Ctrl+Shift+D` in RStudio.)\n* Preview documentation with `?function`\n\n## Documenting functions\n\\fontsize{9}{9}\\sf\n\n```r\n#' Title\n#'\n#' Description\n#' More description\n#'\n#' @param x Description of x\n#' @inheritParams fun\n#' @returns Description of return value\n#' @examples\n#' @importFrom pkg fun\n#' @import pkg\n#' @rdname fun\n#' @aliases fun\n#' @seealso fun\n#' @references Some reference\n#' @author Your name\n#' @export\n```\n\n## Documenting data\n\n* Put raw data in `data-raw/`\n* Code to wrangle data and create objects in `data-raw/`\n* `use_data(object)` to add rda to `data/`\n\n```r\n#' Title\n#'\n#' Description\n#' More description\n#'\n#' @source Where did you get the data?\n#' @format Class, dimensions, or other details\n#' @keywords datasets\n#' @examples\n\"object\"\n```\n\n## README.Rmd\n\n1. Describe the high-level purpose of the package.\n2. A simple example illustrating package.\n3. Installation instructions\n4. An overview of the main components of the package.\n\n* Like a short vignette\n* Displayed on the Github repository and the front page of the pkgdown site.\n* Create with `usethis::use_readme_rmd()`\n* Build with `devtools::build_readme()`\n\n## Vignettes\n\n* A long-form guide to your package, or an extended example.\n\n  * `usethis::use_vignette(\"my-vignette\")`\n  * Creates a `vignettes/` directory.\n  * Adds the necessary dependencies to `DESCRIPTION`\n  * Drafts a vignette, `vignettes/my-vignette.Rmd`.\n  * Adds some patterns to `.gitignore`\n\n## Vignettes YAML\n\n```yaml\n---\ntitle: \"Vignette Title\"\nauthor: Your name\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n```\n\n## Vignettes initial code chunks\n\n\n````{.default}\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE,\n  comment = \"#>\"\n)\n```\n````\n\n\n````{.default}\n```{r setup}\nlibrary(yourpackage)\n```\n````\n\n* Any package used in a vignette must be included in Suggests if not already in Imports.\n\n\n\n\n## NEWS\n\n* List changes in each release that users might care \\rlap{about.}\n* Use `usethis::use_news_md()` to create a `NEWS.md` file.\n\n\\fontsize{9}{9}\\sf\n\n```markdown\n# foofy (development version)\n\n* Better error message when grooving an invalid grobble (#206).\n\n# foofy 1.0.0\n\n## Major changes\n\n* Can now work with all grooveable grobbles!\n\n## Minor improvements and bug fixes\n\n* Printing scrobbles no longer errors (@githubusername, #100).\n\n* Wibbles are now 55% less jibbly (#200).\n```\n\n# Tests\n\n## testthat v3\n\n* `usethis::use_testthat()`\n  * Create a `tests/testthat/` directory.\n  * Add `testthat` to the Suggests field in DESCRIPTION and specify `testthat 3e` in the `Config/testthat/edition` field.\n  * Create a file `tests/testthat.R` that runs all your tests when `check()` runs.\n* Every exported function should have tests.\n* `usethis::use_test(\"some_tests.R\")` creates a test file for a function or group of functions.\n* Each R file should match a test file.\n\n## testthat v3\n\n* Test files live in `tests/testthat/` and are named `test-*.R`.\n* Each test file should test one function or a small group of related functions.\n* Useful testing functions:\n  * `expect_equal()`, `expect_identical()`, `expect_true()`, `expect_false()`\n  * `expect_error()`, `expect_warning()`, `expect_message()`\n* `test()` runs all tests.\n\n## What to test\n\n* Focus on testing the exported functions.\n* Strive to test each behaviour in one and only one test.\n* Avoid testing simple code that you’re confident will work.\n* Always write a test when you discover a bug.\n* The test-first philosophy: always start by writing the tests, and then write the code that makes them pass.\n* Use `devtools::test_coverage()` to see which parts of your package are tested.\n\n# Website\n\n## pkgdown websites\n\n* `usethis::use_pkgdown()`\n  * Creates `_pkgdown.yml` to configure site.\n  * Updates `.Rbuildignore`\n  * Adds `docs` to `.gitignore`\n* `pkgdown::build_site()` to build the site.\n* `usethis::use_pkgdown_github_pages()` to publish the site via GitHub Actions and GitHub Pages.\n* Make a hex sticker with the `hexSticker` package.\n* Add it using `usethis::use_logo()`.\n\n# Continuous integration\n\n## Github Actions\n\\vspace*{-0.4cm}\n\n* Some development tasks can be executed automatically on Github with a trigger (e.g., a push)\n* Run `R CMD check:` `usethis::use_github_action(\"check_standard\")`\n* Compute test coverage: `usethis::use_github_action(\"test-coverage\")`\n* Build and deploy pkgdown site: `usethis::use_github_action(\"pkgdown\")`\n* The `.github/workflows/` directory contains action \\rlap{files.}\n* See [`https://github.com/r-lib/actions/`](https://github.com/r-lib/actions/) for more examples.\n\n# Exercise\n\n## Exercise\n\n* If you haven't finished Assignment 1, do it now.\n\n* If you have finished Assignment 1, create an R package that includes `remaining_customers` as the only function. Add unit tests, a readme file, and a pkgdown website.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}