{
  "hash": "b3ddff53662890593a2dd9f2c0e46055",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming\nauthor: \"Week 4: Debugging and profiing\"\nformat:\n  presentation-beamer:\n    fontsize: \"14pt,t\"\n    section-titles: false\n    knitr:\n      opts_chunk:\n        dev: \"cairo_pdf\"\n    fig-width: 7.5\n    fig-height: 3.5\n    include-in-header: ../header.tex\n    keep-tex: true\n---\n\n\n\n# Debugging\n\n## What's a bug?\n\nAn incorrect, unexpected, or unintended behaviour of code.\n\n:::{.callout-tip}\n## Why do we call it a bug?\n\nWhy not a mistake? A glitch? An oopsie-daisy?\n:::\n\n## What's a bug?\n\n> On September 9, 1947, a real moth was found causing a malfunction in the Harvard Mark II computer. This incident was recorded in the logbook with the note \"First actual case of bug being found.\"\n\n![](harvard_mark_ii.jpg){fig-height=1 fig-align=\"center\"}\n\n## Overall debugging strategy\n\n**Ask for help**\n\n* Ask an LLM (OpenAI, Claude, ...)\n* Ask a search engine (Google, Bing, DuckDuckGo, ...)\n* Ask the community (Stack Overflow / Posit Community, ...)\n\n**Fix it yourself**\n\n* Update your software / R packages\n* Create a minimal reproducible example\n* Explore code to find where the error is\n* Create a unit tests with expected behaviour\n* Fix and test it\n\n## Debugging tools in R\n\\vspace*{-0.2cm}\n\\fontsize{14}{15}\\sf\n\n* `traceback`: prints out the function call stack after an error occurs; does nothing if there's no error.\n* `debug`: flags a function for \"debug\" mode which allows you to step through execution of a function one line at a time.\n* `undebug`: removes the \"debug\" flag from a function.\n* `browser`: pauses execution of a function and puts the function in debug mode.\n* `trace`: allows you to insert code into a function at a specific line number.\n* `untrace`: removes the code inserted by `trace`.\n* `recover`: allows you to modify the error behaviour so that you can browse the function call stack after an error occurs.\n\n## Traceback\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(a) g(a)\ng <- function(b) h(b)\nh <- function(c) i(c)\ni <- function(d) {\n  if (!is.numeric(d)) stop(\"`d` must be numeric\", call. = FALSE)\n  d + 10\n}\n```\n:::\n\n\n\\only<1>{\\includegraphics[width = 12cm]{../screenshots/debugging/rstudio-error.png}}\n\\only<2>{\\includegraphics[width = 12cm]{../screenshots/debugging/rstudio-traceback.png}}\n\\pause\\pause\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf(\"a\")\n#> Error: `d` must be numeric\ntraceback()\n#> 5: stop(\"`d` must be numeric\", call. = FALSE) at debugging.R#6\n#> 4: i(c) at debugging.R#3\n#> 3: h(b) at debugging.R#2\n#> 2: g(a) at debugging.R#1\n#> 1: f(\"a\")\n```\n:::\n\n\n## Interactive debugging\n\\fontsize{13}{14}\\sf\n\n* Using `browser()`\n\n  ```r\n  i <- function(d) {\n    browser()\n    if (!is.numeric(d)) stop(\"`d` must be numeric\", call. = FALSE)\n    d + 10\n  }\n  ```\n\n* Setting breakpoints\n  * Similar to `browser()` but no change to source code.\n  * Set in RStudio by clicking to left of line number, or pressing `Shift+F9`.\n* `options(error = browser)`\n\n## Interactive debugging\n\nDebugging commands:\n\n1. **`n`**: Next line (step over).\n2. **`s`**: Step into function.\n3. **`c`**: Continue to next breakpoint.\n4. **`f`**: Finish the current function.\n5. **`Q`**: Quit debugging.\n6. **`where`**: Show the call stack.\n7. **`help`**: Help with these debugging commands.\n\n## Interactive debugging\n\n* `debug()` : inserts a `browser()` statement at start of function.\n* `undebug()` : removes `browser()` statement.\n* `debugonce()` : same as `debug()`, but removes `browser()` after first run.\n\n## Demo\n\nLet's fix a real, unsolved bug.\n\n[#mitchelloharawild/distributional/issues/133](https://github.com/mitchelloharawild/distributional/issues/133)\n\n``` r\ndistributional::dist_normal() * 2\n#> Error in .mapply(get(op), list(x = vec_data(x), y = y)): argument \"MoreArgs\" is missing, with no default\n```\n\n## The debugging workflow\n\n1. Create a reprex that demonstrates the problem as a comment in the issue.\n2. Fix the problem in the package code.\n3. Add a comment to the issue explaining the bug and the fix, including a link to the commit containing the fix.\n4. Add unit test(s) to the package that confirms the problem is fixed.\n5. Close the issue.\n\n## Exercises\n\n1.  What's wrong with this code?\\fontsize{10}{10}\\sf\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # Multivariate scaling function\n    mvscale <- function(object) {\n      # Remove centers\n      mat <- sweep(object, 2L, colMeans(object))\n      # Scale and rotate\n      S <- var(mat)\n      U <- chol(solve(S))\n      z <- mat %*% t(U)\n      # Return orthogonalized data\n      return(z)\n    }\n    mvscale(mtcars)\n    ```\n    \n    ::: {.cell-output .cell-output-error}\n    \n    ```\n    Error in mat %*% t(U): requires numeric/complex matrix/vector arguments\n    ```\n    \n    \n    :::\n    :::\n\n\n## Example\n\\vspace*{-0.15cm}\n\\centerline{\\href{https://posit.co/resources/videos/debugging-techniques-in-rstudio-2/}{\\includegraphics[width=16cm]{../screenshots/Amanda_Gadrow.png}}}\n\n## Common error messages\n\\fontsize{12}{13}\\sf\n\n* could not find function `\"xxxx\"`\n* object `xxxx` not found\n* cannot open the connection / No such file or directory\n* missing value where `TRUE` / `FALSE` needed\n* unexpected `=` in `\"xxxx\"`\n* attempt to apply non-function\n* undefined columns selected\n* subscript out of bounds\n* object of type 'closure' is not subsettable\n* `$` operator is invalid for atomic vectors\n* list object cannot be coerced to type 'double'\n* arguments imply differing number of rows\n* non-numeric argument to binary operator\n\n## Common warning messages\n\\fontsize{12}{13}\\sf\n\n* NAs introduced by coercion\n* replacement has `xx` rows to replace `yy` rows\n* number of items to replace is not a multiple of replacement length\n* the condition has length > 1 and only the first element will be used\n* longer object length is not a multiple of shorter object length\n* package is not available for R version `xx`\n\n## Asking for help\n\nTo get useful help, it is important that you ask a **good question**. Consider answering these two equivalent questions, which is easier to understand and why?\n\n## Asking for help\n\n::: {.callout-important}\n## urgent help needed with assignment error\n\nMy code doesn't work. Please help i need it working for my assignment asap!\n\ndata <- read.csv(\"C://Users/James/Downloads/project-a9j-2020a/files/survey_data.csv\")\ndata %>% filter(y == \"A\") %>% ggplot(aes(y = y, x = temperature)) + geom_line()\n:::\n\n## Asking for help\n\n::: {.callout-tip}\n## Error with dplyr `filter()`: \"object not found\"\n\nI'm trying to filter a dataset in `dplyr`, but I'm getting an error that I don't understand. Here's my code and error message:  \n\n```r\nsurvey <- data.frame(x = c(1, 2, 3), y = c(\"A\", \"B\", \"C\"))\nsurvey %>% filter(y == \"A\")\n```\nError: `Error in filter(y == \"A\") : object 'y' not found`\n\nI expected it to return rows where `y` is `\"A\"`. How should I fix this?\n:::\n\n\n## Minimal reproducible examples\n\nA minimal reproducible example (MRE) is essential for effectively communicating problems with code. \n\nThe process of creating a MRE might also help you resolve the problem yourself!\n\n## Minimal reproducible examples\n\n**Minimal**\n\nMinimising code and data makes it easier to find the problem.\n\n- **Remove unnecessary code**\n  \n  Include as little code as possible to show the problem.\n- **Use small datasets**\n  \n  Prefer built-in datasets or small example datasets.\n- **Avoid external dependencies**\n  \n  Remove unused packages or files irrelevant to the problem.\n\n\n## Minimal reproducible examples\n\n**Reproducible**\n\n- **Required packages**\n  \n  If external packages are needed, include loading the packages in your MRE.\n- **Used datasets**\n  \n  If you can't use built-in datasets, provide a minimal dataset with `data.frame()` or `dput()`.\n  \n- **Set random seeds**\n  \n  If your problem includes randomisation, include `set.seed()` with appropriate seed.\n\n\n## Minimal reproducible examples\n\n**Examples**\n\n- **Clearly state the issue**\n  \n  Explain what you expect versus what happens.\n- **Ensure clarity**\n  \n  Add code comments to highlight your intention and the problem.\n\n## reprex\n\nThe **reprex** package helps create *minimal reproducible examples*.\n\n* Results are saved to clipboard in form that can be pasted into a GitHub issue, Stack Overflow question, or email.\n* `reprex::reprex()`: takes R code and outputs it in a markdown format.\n* Append session info with `reprex(..., session_info = TRUE)`.\n* Use the RStudio addin.\n\n## reprex as a debugging tool\n\nCreating increasingly minimal reproducible examples can be a useful debugging tool.\n\nLet's look at this bug:\n\n[#tidyverts/fabletools/issues/350](https://github.com/tidyverts/fabletools/issues/350)\n\n``` r\nlibrary(fpp3)\nus_change %>%\n  pivot_longer(c(Consumption, Income), names_to = \"Time Series\") %>%\n  autoplot(value)\n#> Error in `not_tsibble()`:\n#> ! x is not a tsibble.\n```\n\n## Exercises\n\nCreate a Minimal Reproducible Example (MRE) for this code:\n\n```r\nlibrary(tidyverse)\nlibrary(rainbow)\n\nsurvey_data <- read.csv(\"https://arp.numbat.space/week4/survey_data.csv\")\n\nsurvey_data |>\n  select(-RespondentID) |>\n  group_by(Gender) |>\n  count(Satisfaction)\n```\n<https://arp.numbat.space/week4/survey_dplyr_bug.R>\n\n\n## Non-interactive debugging\n\n* Necessary for debugging code that runs in a non-interactive environment.\n* Is the global environment different? Have you loaded different packages? Are objects left from previous sessions causing differences?\n* Is the working directory different?\n* Is the `PATH` environment variable, which determines where external commands (like `git`) are found, different?\n* Is the `R_LIBS` environment variable, which determines where `library()` looks for packages, different?\n\n## Non-interactive debugging\n\n* `dump.frame()` saves state of R session to file.\n\n  ```r\n  # In batch R process ----\n  dump_and_quit <- function() {\n    # Save debugging info to file last.dump.rda\n    dump.frames(to.file = TRUE)\n    # Quit R with error status\n    q(status = 1)\n  }\n  options(error = dump_and_quit)\n\n  # In a later interactive session ----\n  load(\"last.dump.rda\")\n  debugger()\n  ```\n\n* Last resort: `print()`: slow and primitive.\n\n## Other tricks\n\n* `sink()` : capture output to file.\n* `options(warn = 2)` : turn warnings into errors.\n* `rlang::with_abort()` : turn messages into errors.\n* If R or RStudio crashes, it is probably a bug in compiled code.\n* Post minimal reproducible example to Posit Community or Stack Overflow.\n\n# Styling\n\n## Style guides\n\n**Tidyverse**\n\n<https://style.tidyverse.org/>\n\n**Google**\n\n<https://google.github.io/styleguide/Rguide.html>\n\n## Indentation\n\n- Use **2 spaces** per indentation level.\n\n- Add spaces around operators: `x <- y + z`.\n\n## Naming (functions, arguments, objects)\n\nBe brief but descriptive with object names.\n\nUse a consistent naming convention:\n\n- camelCase\n- snake_case\n- PascalCase\n\n## Design\n\n- **Modularity**: Create re-usable parts for maintainability and scalability.\n- **Simplicity**: Keep the interface intuitive and easy to use with straightforward interactions.\n- **Flexibility**: Allow adaptability to different use cases and user preferences.\n- **Feedback**: Provide clear and timely feedback to inform users of actions, errors, and system states.\n\n\n## Automatic styling\n\n* styler: <https://styler.r-lib.org/>\n* air: <https://posit-dev.github.io/air/>\n\nThese can be configured to automatically style your code when you save.\n\nYou can also check your code for common problems with [lintr](https://lintr.r-lib.org/).\n\n# Profiling \n\n## Profiling functions\n\n* `Rprof()` : records every function call.\n* `summaryRprof()` : summarises the results.\n* `profvis()` : visualises the results.\n\n## Profiling\n\nWhere are the bottlenecks in your code?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(profvis)\nlibrary(bench)\nf <- function() {\n  pause(0.1)\n  g()\n  h()\n}\ng <- function() {\n  pause(0.1)\n  h()\n}\nh <- function() {\n  pause(0.1)\n}\n```\n:::\n\n\n## Profiling\n\\fontsize{10}{10}\\sf\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp <- tempfile()\nRprof(tmp, interval = 0.1)\nf()\nRprof(NULL)\nwriteLines(readLines(tmp))\n#> sample.interval=100000\n#> \"pause\" \"g\" \"f\"\n#> \"pause\" \"h\" \"g\" \"f\"\n#> \"pause\" \"h\" \"f\"\n```\n:::\n\n\n## Profiling\n\\fontsize{10}{10}\\sf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here::here(\"week4/profiling-example.R\"))\nprofvis(f())\n```\n:::\n\n\n\\vspace*{-0.5cm}\n\\centerline{\\includegraphics[width = 7cm]{../screenshots/performance/flamegraph.png}}\n\n## Microbenchmarking\n\\fontsize{10}{10}\\sf\n\n### `system.time()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(1e6)\nsystem.time(min(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n  0.001   0.000   0.001 \n```\n\n\n:::\n\n```{.r .cell-code}\nsystem.time(sort(x)[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n  0.043   0.004   0.047 \n```\n\n\n:::\n\n```{.r .cell-code}\nsystem.time(x[order(x)[1]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   user  system elapsed \n  0.035   0.000   0.035 \n```\n\n\n:::\n:::\n\n\n## Microbenchmarking\n\\fontsize{10}{10}\\sf\n\n### `bench::mark()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbench::mark(\n  min(x),\n  sort(x)[1],\n  x[order(x)[1]]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 6\n  expression          min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>     <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 min(x)          853.6us  868.7us    1105.         0B     0   \n2 sort(x)[1]       50.5ms   51.3ms      19.4   11.44MB    11.7 \n3 x[order(x)[1]]   34.6ms     38ms      26.6    3.81MB     2.05\n```\n\n\n:::\n:::\n\n\n## Microbenchmarking\n\n* `mem_alloc` tells you the memory allocated in the first run.\n* `n_gc` tells you the total number of garbage collections over all runs.\n* `n_itr` tells you how many times the expression was evaluated.\n* Pay attention to the units!\n\n## Exercises\n\n2.  What's the fastest way to compute a square root? Compare:\n\n    - `sqrt(x)`\n    - `x^0.5`\n    - `exp(log(x) / 2)`\n\n    Use `system.time()` find the time for each operation.\n\n    Repeat using `bench::mark()`. Why are they different?\n\n# Efficiency\n\n## Vectorization\n\n* Vectorization is the process of converting a repeated operation into a vector operation.\n* The loops in a vectorized function are implemented in C instead of R.\n* Using `map()` or `apply()` is **not** vectorization.\n* Matrix operations are vectorized, and usually very fast.\n\n## Exercises\n\nWrite the following algorithm to estimate $\\displaystyle\\int_0^1 x^2 dx$ using vectorized code\n\n### Monte Carlo Integration\n   a. Initialise: `hits = 0`\n   b. for i in 1:N\n      * Generate two random numbers,  $U_1, U_2$, between 0 and 1\n      * If $U_2 < U_1^2$, then `hits = hits + 1`\n   c. end for\n   d. Area estimate = hits/N\n\n\n## Exercises\n\n4. Use `bench::mark()` to compare the speed of `sq()` and `memo_sq()`.\n",
    "supporting": [
      "slides_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}