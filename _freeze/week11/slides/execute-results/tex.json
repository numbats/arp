{
  "hash": "58ae300a41039a4b0103c4285f3aa348",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming\nauthor: \"Week 11: Rewriting R code in C++\"\nformat:\n  presentation-beamer:\n    fontsize: \"14pt,t\"\n    section-titles: false\n    knitr:\n      opts_chunk:\n        dev: \"cairo_pdf\"\n    fig-width: 7.5\n    fig-height: 3.5\n    include-in-header: ../header.tex\n    keep-tex: true\n---\n\n\n\n## About me\n\n[Tomasz Woźniak](https://github.com/donotdespair)\n\n* senior lecturer in econometrics at the unimelb\n* econometrician: Bayesian time series analyst\n* develops methods for applied macro research\n* loves cycling, yoga, books, volunteering, contemporary theatre, music, and arts\n* I am nice!\n\n## About me\n\n[Tomasz Woźniak](https://github.com/donotdespair)\n\n* **R** enthusiast and specialised user for 17 years\n* associate editor of the [R Journal](https://journal.r-project.org/)\n* author of **R** packages [**bsvars**](https://bsvars.org/bsvars/) and [**bsvarSIGNs**](https://bsvars.org/bsvarSIGNs/)\n\n\\vspace{0.2cm}\\centerline{\\includegraphics[width = 3cm]{bsvars.org.png}\\includegraphics[width = 3cm]{bsvars.png}\\includegraphics[width = 3cm]{bsvarSIGNs.png}}\n\n\n# Motivation\n\n## Motivations\n\n* Compiled code written in **C++** runs much faster than interpreted code in **R**\n* Coding in **C++** for **R** applications has always been possible\n* It requires:\n  * writing **C++** code\n  * compiling it, and\n  * linking it to **R**\n* Difficulties:\n  * tedious object-oriented programming\n  * necessity of assuring object compatibility\n* Benefits are great, but the cost was too high\n\n## Motivations\n\n* **Rcpp** is a family of packages by Dirk Eddelbuetel et al. facilitating the application of **C++** in **R**\n* An interface for communication between **R** and **C++**\n* Greatly simplifies the workflow\n* Easier to benefit from the best of the two worlds:\n  * **C++** programs are pre-compiled assuring fast computations\\\n  *perfect for writing functions*\n  * **R** code is interpreted and dynamic:\\\n  *perfect for data analysis*\n\n## Objectives for this session\n\n* to facilitate working with **C++** in **R** applications\n* to perform a sequence of exercises\n* to focus on:\n  * basic programming structures\n  * functional programming\n  * object types: scalars, vectors, matrices, lists, etc.\n  * linear algebra\n  * statistical distributions\n\n\n## Materials for this session\n\n* Lecture slides\n* **C++** scripts:\n  * [`nicetry.cpp`](https://github.com/numbats/arp/blob/main/week12/nicetry.cpp)\n  * [`nicelr.cpp`](https://github.com/numbats/arp/blob/main/week12/nicelr.cpp)\n  * [`nicelist.cpp`](https://github.com/numbats/arp/blob/main/week12/nicelist.cpp)\n  * [`nicerig2.cpp`](https://github.com/numbats/arp/blob/main/week12/nicerig2.cpp)\n\n## Learning resources\n\n* This session!\n* vignettes: for packages [**Rcpp**](https://cran.r-project.org/package=Rcpp) and [**RcppArmadillo**](https://cran.r-project.org/package=RcppArmadillo)\n* online resources:\n  * [**Armadillo** library documentation](https://arma.sourceforge.net/docs.html)\n  * [RcppGallery](https://gallery.rcpp.org/)\n  * [stackoverflow.com tag:rcpp](https://stackoverflow.com/questions/tagged/rcpp)\n* François, R., [*Optimizing R Code with Rcpp*](https://www.datacamp.com/courses/optimizing-r-code-with-rcpp) on datacamp\n* Tsuda, M., [*Rcpp for everyone*](https://teuder.github.io/rcpp4everyone_en/)\n* Eddelbuettel, D., [*Seamless R and C++ Integration with Rcpp*](https://doi.org/10.1007/978-1-4614-6868-4)\n\n\n\n\n# The first steps with Rcpp\n\n## The first steps with Rcpp\n\nConsider the following **C++** applications in **R**:\n\n* Define a **C++** function in an **R** script\n  * promptly available for fast computations\n* Develop a **C++** function in a `.cpp` file\n  * perfect for developing, testing, and benchmarking\n* Use a function from a `*.cpp` file in **R** computations\n  * perfect for elaborate projects\n* Develop an **R** package using **C++** code\n  * perfect for sharing your work with the community\n\n## Define a **C++** function in an **R** script\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRcpp::cppFunction('\n  DataFrame nicetry (int n) {\n    NumericVector v = rnorm(n);\n    IntegerVector x = seq_len(n);\n    LogicalVector y = v > 0;\n    CharacterVector z(n, \"nice\");\n    return DataFrame::create(_[\"v\"] = v, _[\"x\"] = x, _[\"y\"] = y, _[\"z\"] = z);\n  }\n')\nnicetry(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       v x     y    z\n1 -0.216 1 FALSE nice\n2 -0.121 2 FALSE nice\n```\n\n\n:::\n:::\n\n\n## Develop a **C++** function in a `nicetry.cpp` file\n\nA `*.cpp` file sample contents:\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nList nicetry (int n) {\n  NumericVector v = rnorm(n);\n  IntegerVector x = seq_len(n);\n  LogicalVector y = v > 0;\n  CharacterVector z(n, \"nice\");\n  return List::create(_[\"v\"] = v, _[\"x\"] = x, _[\"y\"] = y, _[\"z\"] = z);\n}\n/*** R\nnicetry(2)\n*/\n```\n:::\n\n\n## Develop a **C++** function in a `nicetry.cpp` file\n\nThe script includes:\n\n* **Rcpp** library and `namespace` declarations (skip: `Rcpp::`)\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n```\n:::\n\n\n* **Rcpp** marker to export the `nicetry` function to R\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n// [[Rcpp::export]]\n```\n:::\n\n\n* sample **R** script\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n/*** R\nnicetry(2)\n*/\n```\n:::\n\n\n## Develop a **C++** function in a `nicetry.cpp` file\n\nThe script includes:\n\n* the function definition\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\nList nicetry (                    // output type and function name\n    int n                         // input type and name\n) {\n  NumericVector v = rnorm(n);     // define a numeric vector and fill it\n  IntegerVector x = seq_len(n);   // define an integer vector as a sequence\n  LogicalVector y = v > 0;        // define a logical vector\n  CharacterVector z(n, \"nice\");   // define a character vector\n  // return a list with the created vectors\n  return List::create(_[\"v\"] = v, _[\"x\"] = x, _[\"y\"] = y, _[\"z\"] = z);\n}\n```\n:::\n\n\n## Develop a **C++** function in a `.cpp` file\n\\fontsize{14}{16}\\sf\n\n::: {.callout-caution title=\"Your turn!\"}\nDevelop a **C++** function that creates a `Tx3` matrix with:\n\n* an integer `T` as the only argument\n* a constant term column: `NumericVector i(n, 1.0);`\n* a linear trend $t - \\bar{t}$ column\n* a quadratic trend $(t - \\bar{t})^2$ column\n\nwhere $t$ goes from $1$ to $T$, and $\\bar{t}$ is the mean of sequence $t$.\n\n* create `NumericVector`s and assemble as `NumericMatrix`\n* use functions `cumsum`, `mean`, `pow`, and `cbind`.\n\nGet some help [HERE](https://teuder.github.io/rcpp4everyone_en/080_vector.html).\n:::\n\n## Use a function from a `nicelist.cpp` file in **R**\n\n* `nicelist.cpp` file contents:\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nList nicelist (int n) {\n  NumericVector p = rnorm(n);\n  NumericVector s(n);\n  for (int i=0; i<n; i++) {\n    s[i] =  pow(p[i], 2);\n  }\n  return List::create(_[\"p\"] = p, _[\"s\"] = s);\n}\n```\n:::\n\n\n## Use a function from a `nicelist.cpp` file in **R**\n\n* **R** script using the function from `nicelist.cpp`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRcpp::sourceCpp(\"nicelist.cpp\")\nnicelist(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$p\n[1] -0.21  1.41 -0.41\n\n$s\n[1] 0.0441 2.0010 0.1683\n```\n\n\n:::\n:::\n\n\n\n## Develop a **C++** function in a `.cpp` file\n\n::: {.callout-caution title=\"Your turn!\"}\nConsider a Gaussian random walk:\n$$\ny_t = y_{t-1} + \\varepsilon_t, \\qquad \\varepsilon_t \\sim N(0,1), \\qquad y_0 = 0\n$$\nDevelop a **C++** function that:\n\n* has an integer `T` as the only argument\n* returns a `T`-vector with Gaussian random walk\\\n\nHint: use functions `rnorm` and `cumsum`.\n:::\n\n\n# Some stats with RcppArmadillo\n\n## Some stats with RcppArmadillo\n\n* Data objects from **Rcpp** have limited functionality\\\n* **Armadillo** is a **C++** library for linear algebra that\n  * provides a rich set of functions\n  * has a simple and intuitive syntax\n  * includes fast linear algebra routines, and\n  * fast random number generators\n  * has fantastic [documentation](http://arma.sourceforge.net/docs.html)\\\n  \n* **RcppArmadillo** is a simplified interface with **Armadillo**\n  * allows seamless integration with **Rcpp**\n  * easily passes data between **R** and **C++**\n\n\n\n## Some stats with RcppArmadillo: IG2 distribution\n\nSampling random draws from an inverted gamma 2 distribution.\n\nA positive random variable $\\sigma^2$ following an inverted gamma 2 distribution with positive scale $s$ and shape $\\nu$ parameters is denoted by:\n$$\n\\sigma^2 \\sim IG2\\left(s, \\nu\\right)\n$$\n\n1. Generate random draw $x$ from $\\chi^2(\\nu)$\n2. Return $\\frac{s}{x}$\n\n## Some stats with RcppArmadillo: IG2 distribution\n\\vspace*{-0.3cm}\n\nContents of a `nicerig2.cpp` file:\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <RcppArmadillo.h>\n// [[Rcpp::depends(RcppArmadillo)]]\nusing namespace arma;\n\n// [[Rcpp::export]]\nvec nicerig2 (\n  const int n, \n  const double s, \n  const double nu\n) {\n  vec rig2 = s / chi2rnd( nu, n );\n  return rig2;\n}\n\n/*** R\nnicerig2(2, 1, 1)\n*/\n```\n:::\n\n\n## Develop a **C++** function in a `.cpp` file\n\\fontsize{14}{16}\\sf\n\n::: {.callout-caution title=\"Your turn!\"}\nConsider a Gaussian random walk:\n$$\ny_t = y_{t-1} + \\varepsilon_t, \\qquad \\varepsilon_t \\sim N(0,1), \\qquad y_0 = 0\n$$\nDevelop a **C++** function using **RcppArmadillo** that:\n\n* has an integer `T` as the only argument\n* returns a `T`-vector of type `vec` with Gaussian random walk\\\n\nGet some help [HERE](http://arma.sourceforge.net/docs.html).\n:::\n\n\n\n\n## Some stats with RcppArmadillo: linear regression\n\nContents of a `nicelr.cpp` file:\n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <RcppArmadillo.h>\n// [[Rcpp::depends(RcppArmadillo)]]\nusing namespace arma;\n\n// [[Rcpp::export]]\nvec nicelr (vec y, mat x) {\n  vec beta_hat = solve(x.t() * x, x.t() * y);\n  return beta_hat;\n}\n\n/*** R\nx = cbind(rep(1,5),1:5); y = x %*% c(1,2) + rnorm(5)\nnicelr(y, x)\n*/\n```\n:::\n\n\n\n## Some stats with RcppArmadillo: linear regression\n\n::: {.callout-caution title=\"Your turn!\"}\nExtend the `nicelr` function to return the covariance:\n$$\n\\widehat{Cov}\\left[\\hat\\beta\\right] = \\hat\\sigma^2 \\left(X'X\\right)^{-1}, \\text{ where } \\hat\\sigma^2 = \\frac{1}{T} \\left( Y - \\hat\\beta X \\right)'\\left( Y - \\hat\\beta X \\right)\n$$\n\n* don't adjust the arguments\n* return `beta_hat` and `cov_beta_hat` in a list\n\nGet some help [HERE](http://arma.sourceforge.net/docs.html).\n\nHint: use functions `inv_sympd` and `.n_elem`.\n:::\n\n\n\n\n## Some stats with RcppArmadillo: Simulation smoother\n\n::: {.callout-caution title=\"Additional resources!\"}\nHave a look at my article on [*Simulation Smoother using RcppArmadillo*](https://gallery.rcpp.org/articles/simulation-smoother-using-rcpparmadillo/) at *Rcpp Gallery*.\n:::\n\n\n# An R package with compiled code\n\n## An R package with compiled code\n\nRun the following code in **R**:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRcppArmadillo::RcppArmadillo.package.skeleton(\"nicepackage\")\n```\n:::\n\n\nNote: this function has a different effect if package **pkgKitten** is installed.\n\n\n## An R package with compiled code\n\n* `DESCRIPTION` includes necessary dependencies\n```\nImports: Rcpp (>= 1.0.14)\nLinkingTo: Rcpp, RcppArmadillo\n```\n\n* `NAMESPACE` includes dynamic library definition and inports\n```\nuseDynLib(nicepackage, .registration=TRUE)\nimportFrom(Rcpp, evalCpp)\n```\n\n\n\n## An R package with compiled code\n\n* **C++** code lives in `src/`\n  * `src/Makevars` files specify compilation flags\n  * `src/Makevars.win` files specify compilation flags for Windows\n  * analyse sample `src/*.cpp` file\n  * files `src/RcppExports.cpp` and `R/RcppExports.R` are generated automatically by running `Rcpp::compileAttributes()`\n  * analyse **R** wrappers to **C++** functions in `R/RcppExports.R`\n  \n\n\n## An R package with compiled code\n\n\n::: {.callout-caution title=\"Your turn!\"}\nCreate an **R** package with compiled code following the steps from repository [donotdespair/15steps2nicepackage](https://github.com/donotdespair/15steps2nicepackage)\\\n\n* Read the `README` file\n* download file `nicepackage.R`\n* follow the instructions in **R**\n:::\n\n## What's next?\n\n* Keep programming in **C++** for **R** applications\n* Reach out for help\n* Read the documentation of the **C++** libraries you're about to use\n* Study the **Rcpp** family of packages\n* Study **openMP** to facilitate parallel computing\n\n## What's next?\n\n\\begin{center}\n\\LARGE\\textbf{Rewrite all your code in Rcpp!\\\\[1ex] Nice!}\n\\end{center}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}