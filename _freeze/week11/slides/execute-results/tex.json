{
  "hash": "a807fa80e95b133002c92780d393efa4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming\nauthor: \"Week 11: Rewriting R code in C++\"\nformat:\n  presentation-beamer:\n    fontsize: \"14pt,t\"\n    section-titles: false\n    knitr:\n      opts_chunk:\n        dev: \"cairo_pdf\"\n    fig-width: 7.5\n    fig-height: 3.5\n    include-in-header: ../header.tex\n    keep-tex: true\n---\n\n\n\n## Outline\n\n```{=tex}\n\\vspace*{0.4cm}\n\\tableofcontents\n```\n\n## About me\n\n[Tomasz Woźniak](https://github.com/donotdespair)\n\n* Senior Lecturer in Econometrics at the unimelb\n* Econometrician: Bayesian time series analyst\n* Develops methods for applied macro research\n* Loves cycling, yoga, books, volunteering, contemporary theatre, music, and art\n* I am nice!\n\n\n## About me\n\n[Tomasz Woźniak](https://github.com/donotdespair)\n\n* **R** enthusiast and specialised user for 16 years\n* [**bsvars**](https://cran.r-project.org/package=bsvars) package author (more coming up)\n\n\\vspace{0.3cm}\\centerline{\\includegraphics[width = 3.5cm]{bsvars.png}}\n\n\n\n# Motivation\n\n## Motivations\n\n* Coding in **C++** for **R** applications has always been possible\n* It requires:\n  * writing **C++** code\n  * compiling it, and\n  * linking it to **R**\n* Difficulties:\n  * tedious object-oriented programming\n  * necessity of assuring object compatibility\n* Benefits are great, but the cost was too high\n\n## Motivations\n\n* **Rcpp** is a family of packages by Dirk Eddelbuetel et al. facilitating the application of **C++** to **R**\n* An interface for communication between **R** and **C++**\n* Greatly simplifies the workflow\n* Easier to benefit from the best of the two worlds:\n  * **C++** programs are pre-compiled assuring fast computations\\\n  *perfect for writing functions*\n  * **R** code is interpreted and dynamic:\\\n  *perfect for data analysis*\n\n## Objectives for this session\n\n* to facilitate working with **C++** for **R** applications\n* to perform a sequence of exercises\n* to focus on:\n  * basic programming structures\n  * functional programming\n  * object types: scalars, vectors, matrices, lists, etc.\n  * linear algebra\n  * statistical distributions\n\n\n## Materials for this session\n\n* Lecture slides\n* **C++** scripts:\n  * [`nicetry.cpp`](https://github.com/numbats/arp/blob/main/week12/nicetry.cpp)\n  * [`nicelr.cpp`](https://github.com/numbats/arp/blob/main/week12/nicelr.cpp)\n  * [`nicelist.cpp`](https://github.com/numbats/arp/blob/main/week12/nicelist.cpp)\n  * [`nicerig2.cpp`](https://github.com/numbats/arp/blob/main/week12/nicerig2.cpp)\n* **R** scripts:\n  * [`nicepackage.R`](https://github.com/numbats/arp/blob/main/week12/nicepackage.R)\n\n## learning resources\n\n* This session!\n* vignettes: for packages [**Rcpp**](https://cran.r-project.org/package=Rcpp) and [**RcppArmadillo**](https://cran.r-project.org/package=RcppArmadillo)\n* online resources:\n  * [**Armadillo** library documentation](https://arma.sourceforge.net/docs.html)\n  * [RcppGallery](https://gallery.rcpp.org/)\n  * [stackoverflow.com tag:rcpp](https://stackoverflow.com/questions/tagged/rcpp)\n* François, R., [*Optimizing R Code with Rcpp*](https://www.datacamp.com/courses/optimizing-r-code-with-rcpp) on datacamp\n* Tsuda, M., [*Rcpp for everyone*](https://teuder.github.io/rcpp4everyone_en/)\n* Eddelbuettel, D., [*Seamless R and C++ Integration with Rcpp*](https://doi.org/10.1007/978-1-4614-6868-4)\n\n\n\n\n\n\n# The first steps with Rcpp\n\n## The first steps with Rcpp\n\nConsider the following **C++** applications in **R**:\n\n* Define a **C++** function in an **R** script\n  * promptly available for fast computations\n* Develop a **C++** function in a `.cpp` file\n  * perfect for developing, testing, and benchmarking\n* Use a function from a `*.cpp` file in **R** computations\n  * perfect for elaborate projects\n* Develop an **R** package using **C++** code\n  * perfect for sharing your work with the community\n\n## Define a **C++** function in an **R** script\n\n::: {.cell}\n\n```{.r .cell-code}\nRcpp::cppFunction('\n  DataFrame nicetry (int n) {\n    NumericVector v = rnorm(n);\n    IntegerVector x = seq_len(n);\n    LogicalVector y = v > 0;\n    CharacterVector z(n, \"nice\");\n    return DataFrame::create(_[\"v\"] = v, _[\"x\"] = x, _[\"y\"] = y, _[\"z\"] = z);\n  }\n')\nnicetry(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       v x     y    z\n1  0.945 1  TRUE nice\n2 -0.664 2 FALSE nice\n```\n\n\n:::\n:::\n\n\n## Develop a **C++** function in a `nicetry.cpp` file\n\nA `*.cpp` file sample contents:\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nList nicetry (int n) {\n  NumericVector v = rnorm(n);\n  IntegerVector x = seq_len(n);\n  LogicalVector y = v > 0;\n  CharacterVector z(n, \"nice\");\n  return List::create(_[\"v\"] = v, _[\"x\"] = x, _[\"y\"] = y, _[\"z\"] = z);\n}\n/*** R\nnicetry(2)\n*/\n```\n:::\n\n\n## Develop a **C++** function in a `nicetry.cpp` file\n\nThe script includes:\n\n* **Rcpp** library and `namespace` declarations (skip: `Rcpp::`)\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n```\n:::\n\n* **Rcpp** marker to export the `nicetry` function to R\n\n::: {.cell}\n\n```{.cpp .cell-code}\n// [[Rcpp::export]]\n```\n:::\n\n* sample **R** script\n\n::: {.cell}\n\n```{.cpp .cell-code}\n/*** R\nnicetry(2)\n*/\n```\n:::\n\n\n## Develop a **C++** function in a `nicetry.cpp` file\n\nThe script includes:\n\n* the function definition\n\n::: {.cell}\n\n```{.cpp .cell-code}\nList nicetry (                    // output type and function name\n    int n                         // input type and name\n) {\n  NumericVector v = rnorm(n);     // define a numeric vector and fill it\n  IntegerVector x = seq_len(n);   // define an integer vector as a sequence\n  LogicalVector y = v > 0;        // define a logical vector\n  CharacterVector z(n, \"nice\");   // define a character vector\n  // return a list with the created vectors\n  return List::create(_[\"v\"] = v, _[\"x\"] = x, _[\"y\"] = y, _[\"z\"] = z);\n}\n```\n:::\n\n## Develop a **C++** function in a `.cpp` file\n\n::: {.callout-caution title=\"Your turn!\"}\nDevelop a **C++** function that creates a `Tx3` matrix with:\n\n* an integer `T` as the only argument\n* a constant term column\n* a linear trend $t - \\bar{t}$ column\n* a quadratic trend $(t - \\bar{t})^2$ column\n\nwhere $t$ goes from $1$ to $T$, and $\\bar{t}$ is the mean of sequence $t$.\n\nGet some help [HERE](https://teuder.github.io/rcpp4everyone_en/080_vector.html).\n:::\n\n\n## Use a function from a `nicelist.cpp` file in **R**\n\n* `nicelist.cpp` file contents:\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nList nicelist (int n) {\n  NumericVector p = rnorm(n);\n  NumericVector s(n);\n  for (int i=0; i<n; i++) {\n    s[i] =  pow(p[i], 2);\n  }\n  return List::create(_[\"p\"] = p, _[\"s\"] = s);\n}\n```\n:::\n\n\n## Use a function from a `nicelist.cpp` file in **R**\n\n* **R** script using the function from `nicelist.cpp`:\n\n::: {.cell}\n\n```{.r .cell-code}\nRcpp::sourceCpp(\"nicelist.cpp\")\nnicelist(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$p\n[1] -1.548 -0.554 -0.601\n\n$s\n[1] 2.397 0.307 0.362\n```\n\n\n:::\n:::\n\n\n\n## Develop a **C++** function in a `.cpp` file\n\n::: {.callout-caution title=\"Your turn!\"}\nConsider a Gaussian random walk:\n$$\ny_t = y_{t-1} + \\varepsilon_t, \\qquad \\varepsilon_t \\sim N(0,1), \\qquad y_0 = 0\n$$\nDevelop a **C++** function that:\n\n* has an integer `T` as the only argument\n* returns a `T`-vector with Gaussian random walk\n:::\n\n\n\n# Some stats with RcppArmadillo\n\n## Some stats with RcppArmadillo\n\n* Data objects from **Rcpp** have limited functionality\n* **Armadillo** is a **C++** library for linear algebra that\n  * provides a rich set of functions\n  * has a simple and intuitive syntax\n  * includes fast linear algebra routines, and\n  * fast random number generators\n  * has fantastic [documentation](http://arma.sourceforge.net/docs.html)\n* **RcppArmadillo** is a simplified interface with **Armadillo**\n  * allows seamless integration with **Rcpp**\n  * easily passes data between **R** and **C++**\n\n## Some stats with RcppArmadillo: linear regression\n\nContents of a `nicelr.cpp` file:\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <RcppArmadillo.h>\n// [[Rcpp::depends(RcppArmadillo)]]\nusing namespace arma;\n\n// [[Rcpp::export]]\nvec nicelr (vec y, mat x) {\n  vec beta_hat = solve(x.t() * x, x.t() * y);\n  return beta_hat;\n}\n\n/*** R\nx = cbind(rep(1,5),1:5); y = x %*% c(1,2) + rnorm(5)\nnicelr(y, x)\n*/\n```\n:::\n\n\n\n## Some stats with RcppArmadillo: linear regression\n\n::: {.callout-caution title=\"Your turn!\"}\nExtend the `nicelr` function to return also the covariance of $\\hat{\\beta}$:\n$$\n\\widehat{Cov}\\left[\\hat\\beta\\right] = \\hat\\sigma^2 \\left(X'X\\right)^{-1}, \\qquad \\hat\\sigma^2 = \\frac{1}{T} \\left( Y - \\hat\\beta X \\right)'\\left( Y - \\hat\\beta X \\right)\n$$\n\n* don't adjust the arguments\n* return `beta_hat` and `cov_beta_hat` in a list\n\nGet some help [HERE](http://arma.sourceforge.net/docs.html).\n:::\n\n\n\n## Some stats with RcppArmadillo: IG2 distribution\n\nSampling random draws from an inverted gamma 2 distribution.\n\nA positive random variable $\\sigma^2$ following an inverted gamma 2 distribution with positive scale $s$ and shape $\\nu$ parameters is denoted by:\n$$\n\\sigma^2 \\sim IG2\\left(s, \\nu\\right)\n$$\n\n1. Generate random draw $x$ from $\\chi^2(\\nu)$\n2. Return $\\frac{s}{x}$\n\n\n## Some stats with RcppArmadillo: IG2 distribution\n\nContents of a `nicerig2.cpp` file:\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <RcppArmadillo.h>\n// [[Rcpp::depends(RcppArmadillo)]]\nusing namespace arma;\n\n// [[Rcpp::export]]\nvec nicerig2 (const int n, const double s, const double nu) {\n  vec rig2 = s / chi2rnd( nu, n );\n  return rig2;\n}\n\n/*** R\nnicerig2(2, 1, 1)\n*/\n```\n:::\n\n\n## Some stats with RcppArmadillo: NIG2 distribution\n\n**Normal-inverted gamma 2 distribution.**\n\nRandom variables, an $N$-vector $\\mathbf{x}$ and a positive scalar, $\\sigma^2$, following the normal-inverted gamma 2 distribution with\n\n* an $N$-vector of the mean $\\boldsymbol\\mu$\n* a positive definite $N\\times N$ covariance matrix $\\boldsymbol\\Sigma$\n* a positive scale $s$\n* a positive shape $\\nu$\n\n## Some stats with RcppArmadillo: NIG2 distribution\n\n**Normal-inverted gamma 2 distribution.**\n\\begin{align*}\n\\left(\\mathbf{x}, \\sigma^2\\right) &\\sim NIG2\\left(\\boldsymbol\\mu, \\boldsymbol\\Sigma, s, \\nu\\right)\\\\[2ex]\np\\left(\\mathbf{x}, \\sigma^2\\right) &= p\\left(\\mathbf{x} \\mid \\sigma^2\\right)p\\left(\\sigma^2\\right)\\\\[2ex]\n\\sigma^2 &\\sim IG2\\left(s, \\nu\\right)\\\\\n\\mathbf{x} \\mid \\sigma^2 &\\sim N\\left(\\boldsymbol\\mu, \\sigma^2\\boldsymbol\\Sigma\\right)\n\\end{align*}\n\n\n## Some stats with RcppArmadillo: NIG2 distribution\n\nTo generate $n$ random draws from the normal-inverted gamma 2 distribution:\n\n1. Generate $n$ independent random draws of $\\sigma^{2(j)}$ from $IG2(s, \\nu)$ for $j=1,\\dots,n$\n2. For each $j$, generate the corresponding random draw of $\\mathbf{x}^{(j)}$ from $N\\left(\\boldsymbol\\mu, \\sigma^{2(j)}\\boldsymbol\\Sigma\\right)$\n3. Return the collection of pairs $\\left\\{\\mathbf{x}^{(j)}, \\sigma^{2(j)}\\right\\}_{j=1}^n$\n\n\n## Some stats with RcppArmadillo: NIG2 distribution\n\n\n::: {.callout-caution title=\"Your turn!\"}\nComplement the `niceig2` function with another one that provides $n$ random draws from the normal-inverted gamma 2 distribution.\n\n* adjust the arguments\n* return a list containing\n  * an $n$-vector of $\\sigma^2$ draws\n  * an $n\\times N$ matrix of $\\mathbf{x}$ draws\n\nGet some help [HERE](http://arma.sourceforge.net/docs.html).\n:::\n\n## Some stats with RcppArmadillo: Simulation smoother\n\n::: {.callout-caution title=\"Additional resources!\"}\nHave a look at my article on [*Simulation Smoother using RcppArmadillo*](https://gallery.rcpp.org/articles/simulation-smoother-using-rcpparmadillo/) at *Rcpp Gallery*.\n:::\n\n\n\n# Create an R package with compiled code in ten steps\n\n## Step 1: create a package\n\nRun the following code in **R**:\n\n::: {.cell}\n\n```{.r .cell-code}\nRcppArmadillo::RcppArmadillo.package.skeleton(\"nicepackage\")\n```\n:::\n\n* **C++** code lives in `src/`\n* `DESCRIPTION` includes necessary dependencies\n* `NAMESPACE` includes `useDynLib(nicepackage)`\n* **R** functions in `R/` refer to **C++** functions via `.Call()`\n* File `R/RcppExports.R` contains all **C++** functions exported to **R**\n\n## Step 2: create R project and open it\n\n* you know what to do\n\n## Step 3: some cleaning\n\n* remove files:\n  * `Read-and-delete-me`\n  * `src/HelloWorld.cpp`\n  * `man/*`\n\n## Step 4: include useful elements\n\n1. Set **git** `usethis::use_git()`\n2. Set licencing `usethis::use_gpl3_license()`\n3. Set package doc `usethis::use_package_doc()`\n4. Set **roxy** `roxygen2::roxygenise()`\n  * copy `Encoding: UTC-8` to `DESCRIPTION`\n  * remove the `NAMESPACE` file\n  * run `roxygen2::roxygenise()` again\n<!-- 5. Run `usethis::use_rcpp_armadillo()` -->\n\n\n## Step 5: edit the `DESCRIPTION` file\n\n* you know what to do!\n\n## Step 6: include compiled code\n\n1. copy the `nicerig2.cpp` file to `src/` directory\n2. edit it\n3. include the header file `nicerig2.h` in the `src/` directory\n4. edit it\n\n## Step 7: compile the code the first time\n\n1. Run `Rcpp::compileAttributes()` to update the `R/RcppExports.R` file\n<!-- 2. Run `devtools::check()` -->\n\n## Step 8: include R wrapper for C++ function\n\n1. Create an `R/nicerig2.R` file\n2. Copy/paste the corresponding function from the `R/RcppExports.R` file\n3. Include argument check\n4. Include documentation\n5. Implement further adjustments\n\n## Step 9: some final touches\n\n1. Run `Rcpp::compileAttributes()`\n2. Run `devtools::document()` to generate documentation\n3. Run `devtools::check()` to check the package\n\nTADA! Your package is ready!\n\n## Step 10: use the package for the first time\n\n1. Run `devtools::load_all()` to load the package\n2. Run `hist(nicerig2(1e4), breaks = 100)` to test the function\n3. Run `?nicerig2` and `?nicepackage` to check the documentation\n\n\n## What's next?\n\n$$ $$\n\n\\begin{center}\n\\LARGE\\textbf{Rewrite all your code in Rcpp!\\\\[1ex] Nice!}\n\\end{center}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}