---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 11: Rewriting R code in C++"
format:
  presentation-beamer:
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    keep-tex: true
---

```{r}
#| label: setup
#| include: false
#| cache: false
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Outline

```{=tex}
\vspace*{0.4cm}
\tableofcontents
```


## About me

[Tomasz Woźniak](https://github.com/donotdespair)

* senior lecturer in econometrics at the unimelb
* econometrician: Bayesian time series analyst
* develops methods for applied macro research
* loves cycling, yoga, books, volunteering, contemporary theatre, music, and arts
* I am nice!

## About me

[Tomasz Woźniak](https://github.com/donotdespair)

* **R** enthusiast and specialised user for 17 years
* associate editor of the [R Journal](https://journal.r-project.org/)
* author of **R** packages [**bsvars**](https://bsvars.org/bsvars/) and [**bsvarSIGNs**](https://bsvars.org/bsvarSIGNs/)

\vspace{0.2cm}\centerline{\includegraphics[width = 3cm]{bsvars.org.png}\includegraphics[width = 3cm]{bsvars.png}\includegraphics[width = 3cm]{bsvarSIGNs.png}}


# Motivation

## Motivations

* Compiled code written in **C++** runs much faster than interpreted code in **R**
* Coding in **C++** for **R** applications has always been possible
* It requires:
  * writing **C++** code
  * compiling it, and
  * linking it to **R**
* Difficulties:
  * tedious object-oriented programming
  * necessity of assuring object compatibility
* Benefits are great, but the cost was too high

## Motivations

* **Rcpp** is a family of packages by Dirk Eddelbuetel et al. facilitating the application of **C++** in **R**
* An interface for communication between **R** and **C++**
* Greatly simplifies the workflow
* Easier to benefit from the best of the two worlds:
  * **C++** programs are pre-compiled assuring fast computations\
  *perfect for writing functions*
  * **R** code is interpreted and dynamic:\
  *perfect for data analysis*

## Objectives for this session

* to facilitate working with **C++** in **R** applications
* to perform a sequence of exercises
* to focus on:
  * basic programming structures
  * functional programming
  * object types: scalars, vectors, matrices, lists, etc.
  * linear algebra
  * statistical distributions


## Materials for this session

* Lecture slides
* **C++** scripts:
  * [`nicetry.cpp`](https://github.com/numbats/arp/blob/main/week12/nicetry.cpp)
  * [`nicelr.cpp`](https://github.com/numbats/arp/blob/main/week12/nicelr.cpp)
  * [`nicelist.cpp`](https://github.com/numbats/arp/blob/main/week12/nicelist.cpp)
  * [`nicerig2.cpp`](https://github.com/numbats/arp/blob/main/week12/nicerig2.cpp)

## Learning resources

* This session!
* vignettes: for packages [**Rcpp**](https://cran.r-project.org/package=Rcpp) and [**RcppArmadillo**](https://cran.r-project.org/package=RcppArmadillo)
* online resources:
  * [**Armadillo** library documentation](https://arma.sourceforge.net/docs.html)
  * [RcppGallery](https://gallery.rcpp.org/)
  * [stackoverflow.com tag:rcpp](https://stackoverflow.com/questions/tagged/rcpp)
* François, R., [*Optimizing R Code with Rcpp*](https://www.datacamp.com/courses/optimizing-r-code-with-rcpp) on datacamp
* Tsuda, M., [*Rcpp for everyone*](https://teuder.github.io/rcpp4everyone_en/)
* Eddelbuettel, D., [*Seamless R and C++ Integration with Rcpp*](https://doi.org/10.1007/978-1-4614-6868-4)




# The first steps with Rcpp

## The first steps with Rcpp

Consider the following **C++** applications in **R**:

* Define a **C++** function in an **R** script
  * promptly available for fast computations
* Develop a **C++** function in a `.cpp` file
  * perfect for developing, testing, and benchmarking
* Use a function from a `*.cpp` file in **R** computations
  * perfect for elaborate projects
* Develop an **R** package using **C++** code
  * perfect for sharing your work with the community

## Define a **C++** function in an **R** script

```{r}
Rcpp::cppFunction('
  DataFrame nicetry (int n) {
    NumericVector v = rnorm(n);
    IntegerVector x = seq_len(n);
    LogicalVector y = v > 0;
    CharacterVector z(n, "nice");
    return DataFrame::create(_["v"] = v, _["x"] = x, _["y"] = y, _["z"] = z);
  }
')
nicetry(2)
```

## Develop a **C++** function in a `nicetry.cpp` file

A `*.cpp` file sample contents:

```{Rcpp rcpp_df}
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
List nicetry (int n) {
  NumericVector v = rnorm(n);
  IntegerVector x = seq_len(n);
  LogicalVector y = v > 0;
  CharacterVector z(n, "nice");
  return List::create(_["v"] = v, _["x"] = x, _["y"] = y, _["z"] = z);
}
/*** R
nicetry(2)
*/
```

## Develop a **C++** function in a `nicetry.cpp` file

The script includes:

* **Rcpp** library and `namespace` declarations (skip: `Rcpp::`)

```{Rcpp rcpp_df1, eval = FALSE}
#include <Rcpp.h>
using namespace Rcpp;
```

* **Rcpp** marker to export the `nicetry` function to R

```{Rcpp rcpp_df2, eval = FALSE}
// [[Rcpp::export]]
```

* sample **R** script

```{Rcpp rcpp_df3, eval = FALSE}
/*** R
nicetry(2)
*/
```

## Develop a **C++** function in a `nicetry.cpp` file

The script includes:

* the function definition

```{Rcpp rcpp_df4, eval = FALSE}
List nicetry (                    // output type and function name
    int n                         // input type and name
) {
  NumericVector v = rnorm(n);     // define a numeric vector and fill it
  IntegerVector x = seq_len(n);   // define an integer vector as a sequence
  LogicalVector y = v > 0;        // define a logical vector
  CharacterVector z(n, "nice");   // define a character vector
  // return a list with the created vectors
  return List::create(_["v"] = v, _["x"] = x, _["y"] = y, _["z"] = z);
}
```

## Develop a **C++** function in a `.cpp` file

::: {.callout-caution title="Your turn!"}
Develop a **C++** function that creates a `Tx3` matrix with:

* an integer `T` as the only argument
* a constant term column: `NumericVector i(n, 1.0);`
* a linear trend $t - \bar{t}$ column
* a quadratic trend $(t - \bar{t})^2$ column

where $t$ goes from $1$ to $T$, and $\bar{t}$ is the mean of sequence $t$.

* create `NumericVector`s and assemble as `NumericMatrix`
* use functions `cumsum`, `mean`, `pow`, and `cbind`.

Get some help [HERE](https://teuder.github.io/rcpp4everyone_en/080_vector.html).
:::

## Use a function from a `nicelist.cpp` file in **R**

* `nicelist.cpp` file contents:

```{Rcpp rcpp_df5, eval = FALSE}
#include <Rcpp.h>
using namespace Rcpp;

// [[Rcpp::export]]
List nicelist (int n) {
  NumericVector p = rnorm(n);
  NumericVector s(n);
  for (int i=0; i<n; i++) {
    s[i] =  pow(p[i], 2);
  }
  return List::create(_["p"] = p, _["s"] = s);
}
```

## Use a function from a `nicelist.cpp` file in **R**

* **R** script using the function from `nicelist.cpp`:

```{r nicelist}
Rcpp::sourceCpp("nicelist.cpp")
nicelist(3)
```


## Develop a **C++** function in a `.cpp` file

::: {.callout-caution title="Your turn!"}
Consider a Gaussian random walk:
$$
y_t = y_{t-1} + \varepsilon_t, \qquad \varepsilon_t \sim N(0,1), \qquad y_0 = 0
$$
Develop a **C++** function that:

* has an integer `T` as the only argument
* returns a `T`-vector with Gaussian random walk\

Hint: use functions `rnorm` and `cumsum`.
:::


# Some stats with RcppArmadillo

## Some stats with RcppArmadillo

* Data objects from **Rcpp** have limited functionality\
* **Armadillo** is a **C++** library for linear algebra that
  * provides a rich set of functions
  * has a simple and intuitive syntax
  * includes fast linear algebra routines, and
  * fast random number generators
  * has fantastic [documentation](http://arma.sourceforge.net/docs.html)\
  
* **RcppArmadillo** is a simplified interface with **Armadillo**
  * allows seamless integration with **Rcpp**
  * easily passes data between **R** and **C++**



## Some stats with RcppArmadillo: IG2 distribution

Sampling random draws from an inverted gamma 2 distribution.

A positive random variable $\sigma^2$ following an inverted gamma 2 distribution with positive scale $s$ and shape $\nu$ parameters is denoted by:
$$
\sigma^2 \sim IG2\left(s, \nu\right)
$$

1. Generate random draw $x$ from $\chi^2(\nu)$
2. Return $\frac{s}{x}$

## Some stats with RcppArmadillo: IG2 distribution

Contents of a `nicerig2.cpp` file:

```{Rcpp nicerig2}
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]
using namespace arma;

// [[Rcpp::export]]
vec nicerig2 (
  const int n, 
  const double s, 
  const double nu
) {
  vec rig2 = s / chi2rnd( nu, n );
  return rig2;
}

/*** R
nicerig2(2, 1, 1)
*/
```

## Develop a **C++** function in a `.cpp` file

::: {.callout-caution title="Your turn!"}
Consider a Gaussian random walk:
$$
y_t = y_{t-1} + \varepsilon_t, \qquad \varepsilon_t \sim N(0,1), \qquad y_0 = 0
$$
Develop a **C++** function using **RcppArmadillo** that:

* has an integer `T` as the only argument
* returns a `T`-vector of type `vec` with Gaussian random walk\

Get some help [HERE](http://arma.sourceforge.net/docs.html).
:::




## Some stats with RcppArmadillo: linear regression

Contents of a `nicelr.cpp` file:

```{Rcpp nicelr}
#include <RcppArmadillo.h>
// [[Rcpp::depends(RcppArmadillo)]]
using namespace arma;

// [[Rcpp::export]]
vec nicelr (vec y, mat x) {
  vec beta_hat = solve(x.t() * x, x.t() * y);
  return beta_hat;
}

/*** R
x = cbind(rep(1,5),1:5); y = x %*% c(1,2) + rnorm(5)
nicelr(y, x)
*/
```


## Some stats with RcppArmadillo: linear regression

::: {.callout-caution title="Your turn!"}
Extend the `nicelr` function to return the covariance:
$$
\widehat{Cov}\left[\hat\beta\right] = \hat\sigma^2 \left(X'X\right)^{-1}, \text{ where } \hat\sigma^2 = \frac{1}{T} \left( Y - \hat\beta X \right)'\left( Y - \hat\beta X \right)
$$

* don't adjust the arguments
* return `beta_hat` and `cov_beta_hat` in a list

Get some help [HERE](http://arma.sourceforge.net/docs.html).

Hint: use functions `inv_sympd` and `.n_elem`.
:::




## Some stats with RcppArmadillo: Simulation smoother

::: {.callout-caution title="Additional resources!"}
Have a look at my article on [*Simulation Smoother using RcppArmadillo*](https://gallery.rcpp.org/articles/simulation-smoother-using-rcpparmadillo/) at *Rcpp Gallery*.
:::


# An R package with compiled code

## An R package with compiled code

Run the following code in **R**:

```{r step1, eval = FALSE}
RcppArmadillo::RcppArmadillo.package.skeleton("nicepackage")
```

Note: this function has a different effect if package **pkgKitten** is installed.


## An R package with compiled code

* `DESCRIPTION` includes necessary dependencies
```
Imports: Rcpp (>= 1.0.14)
LinkingTo: Rcpp, RcppArmadillo
```

* `NAMESPACE` includes dynamic library definition and inports
```
useDynLib(nicepackage, .registration=TRUE)
importFrom(Rcpp, evalCpp)
```



## An R package with compiled code

* **C++** code lives in `src/`
  * `src/Makevars` files specify compilation flags
  * `src/Makevars.win` files specify compilation flags for Windows
  * analyse sample `src/*.cpp` file
  * files `src/RcppExports.cpp` and `R/RcppExports.R` are generated automatically by running `Rcpp::compileAttributes()`
  * analyse **R** wrappers to **C++** functions in `R/RcppExports.R`
  


## An R package with compiled code


::: {.callout-caution title="Your turn!"}
Create an **R** package with compiled code following the steps from repository [donotdespair/15steps2nicepackage](https://github.com/donotdespair/15steps2nicepackage)\

* Read the `README` file
* download file `nicepackage.R`
* follow the instructions in **R**
:::

## What's next?

* Keep programming in **C++** for **R** applications
* Reach out for help
* Read the documentation of the **C++** libraries you're about to use
* Study the **Rcpp** family of packages
* Study **openMP** to facilitate parallel computing

## What's next?

\begin{center}
\LARGE\textbf{Rewrite all your code in Rcpp!\\[1ex] Nice!}
\end{center}
