---
title: ETC4500/ETC5450 Advanced&nbsp;R&nbsp;programming
author: "Week 1: Foundations of R programming"
format:
  presentation-beamer:
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: ../header.tex
    keep-tex: false
---

```{r setup, include=FALSE}
source(here::here("setup.R"))
source(here::here("course_info.R"))
```

## Introduction

### Expectations

* You know R and RStudio
* You have a basic understanding of programming (for loops, if statements, functions)
* You can use Git and GitHub (https://happygitwithr.com)

### Unit resources

* Everything on **https://arp.numbat.space**
* Assignments submitted on Github Classroom
* Discussion on Ed

## GitHub

* Use your monash edu address.
* Apply to GitHub Global Campus as a student (<https://github.com/education/students>).
* Gives you free access to private repos and GitHub Copilot.
* Add GitHub Copilot to RStudio settings.

## R history

* S (1976, Chambers, Becker and Wilks; Bell Labs, USA)
* S-PLUS (1988, Doug Martin; Uni of Washington, USA)
* R (1993, Ihaka and Gentleman; Uni of Auckland, NZ)

\pause\vspace*{0.4cm}

### R influenced by

* Lisp (functional programming, environments, dynamic typing)
* Scheme (functional programming, lexical scoping)
* S and S-PLUS (syntax)

## Why R?

* Free, open source, and on every major platform.
* A diverse and welcoming community
* A massive set of packages, often cutting-edge.
* Powerful communication tools (Shiny, Rmarkdown, \rlap{quarto)}
* RStudio and Positron IDEs
* Deep-seated language support for data analysis.
* A strong foundation of functional programming.
* Posit
* Easy connection to high-performance programming languages
  like C, Fortran, and C++.

## R challenges

* R users are not usually programmers. Most R code by ordinary users is not very elegant, fast, or easy to understand.
* R users more focused on results than good software practices.
* R packages are inconsistent in design.
* R can be slow.

# Scalars and vectors

## Scalars

* **Logicals**: `TRUE` or `FALSE`, or abbreviated (`T` or `F`).

* **Doubles**: decimal (`0.1234`), scientific (`1.23e4`), or hexadecimal (`0xcafe`). Special values: `Inf`, `-Inf`, and `NaN` (not a number).

* **Integers**: `1234L`, `1e4L`, or `0xcafeL`. Can not contain fractional values.

* **Strings**: `"hi"` or `'bye'`. Special characters are escaped with `\`.

## Making longer vectors with `c()` {#atomic-constructing}

Use `c()` to create vectors.

```{r}
lgl_var <- c(TRUE, FALSE)
int_var <- c(1L, 6L, 10L)
dbl_var <- c(1, 2.5, 4.5)
chr_var <- c("these are", "some strings")
```
When the inputs are atomic vectors,\newline `c()` always flattens.

```{r}
c(c(1, 2), c(3, 4))
```

\placefig{9.8}{2.5}{width=6cm}{../diagrams/vectors/atomic.png}

## Atomic vectors
\vspace*{-0.2cm}

* Four primary types of atomic vectors: `logical`, `double`, `integer`,  and `character` (which contains strings).
* Two rare types: `complex`, `raw`.
* Collectively `integer` and `double` vectors are known as `numeric` vectors
* `NULL` is like a zero length vector
* Scalars are just vectors of length 1
* Every vector can also have __attributes__: a named list of arbitrary metadata.
* The __dimension__ attribute turns vectors into matrices and arrays.
* The __class__ attribute powers the S3 object system.


## Types and length
\fontsize{13}{13}\sf

You can determine the type of a vector with `typeof()` and its length with `length()`.

\fontsize{10}{10}\sf


```{r}
typeof(lgl_var)
typeof(int_var)
typeof(dbl_var)
typeof(chr_var)
```

## Missing values

Most computations involving a missing value will return another missing value.

\fontsize{10}{10}\sf

```{r}
NA > 5
10 * NA
!NA
```

## Missing values

Exceptions:

\fontsize{10}{10}\sf

```{r}
NA ^ 0
NA | TRUE
NA & FALSE
```

## Missing values

Use `is.na()` to check for missingness

\fontsize{10}{10}\sf

```{r}
x <- c(NA, 5, NA, 10)
x == NA
is.na(x)
```

\fontsize{13}{14}\sf

There are actually four missing values:  `NA` (logical), `NA_integer_` (integer), `NA_real_` (double), and `NA_character_` (character).

## Coercion
\fontsize{13}{14}\sf\vspace*{-0.25cm}

* For atomic vectors, all elements must be the same type.
* When you combine different types they are __coerced__ in a fixed order: logical → integer → double → character.

\fontsize{10}{4}\sf

```{r}
str(c("a", 1))
x <- c(FALSE, FALSE, TRUE)
as.numeric(x)
sum(x)
as.integer(c("1", "1.5", "a"))
```

## Exercises

1.  Predict the output of the following:

    ```{r, eval=FALSE}
    c(1, FALSE)
    c("a", 1)
    c(TRUE, 1L)
    ```

2. Why is `1 == "1"` true? Why is `-1 < FALSE` true? Why is `"one" < 2` false?

3. Why is the default missing value, `NA`, a logical vector? What's special
   about logical vectors? (Hint: think about `c(FALSE, NA_character_)`.)

## Getting and setting attributes

* You can think of attributes as name-value pairs that attach metadata to an object.
* Individual attributes can be retrieved and modified with `attr()`, or retrieved en masse with `attributes()`, and set en masse with `structure()`.

\fontsize{10}{10}\sf

```{r}
a <- 1:3
attr(a, "x") <- "abcdef"
a
```

## Getting and setting attributes
\fontsize{10}{10}\sf

```{r}
attr(a, "y") <- 4:6
str(attributes(a))

# Or equivalently
a <- structure(
  1:3,
  x = "abcdef",
  y = 4:6
)
str(attributes(a))
```

\placefig{10}{1}{width=3.5cm}{../diagrams/vectors/attr.png}

## Names {#attr-names}

* Names are a type of attribute.
* You can name a vector in three ways:

\fontsize{10}{10}\sf

```{r}
# When creating it:
x <- c(a = 1, b = 2, c = 3)

# By assigning a character vector to names()
x <- 1:3
names(x) <- c("a", "b", "c")

# Inline, with setNames():
x <- setNames(1:3, c("a", "b", "c"))
```

```{r}
x
```

## Names

* Avoid using `attr(x, "names")` as it requires more typing and is less readable than `names(x)`.
* You can remove names from a vector by using\newline `x <- unname(x)` or `names(x) <- NULL`.


## Dimensions {#attr-dims}

* Adding a `dim` attribute to a vector allows it to behave like a 2-dimensional __matrix__ or a multi-dimensional __array__.
* You can create matrices and arrays with `matrix()` and `array()`, or by using the assignment form of `dim()`:

```{r}
# Two scalar arguments specify row and column sizes
x <- matrix(1:6, nrow = 2, ncol = 3)
x
```

## Dimensions

```{r}
# One vector argument to describe all dimensions
y <- array(1:12, c(2, 3, 2))
y
```

## Dimensions

```{r}
# You can also modify an object in place by setting dim()
z <- 1:6
dim(z) <- c(3, 2)
z
```

## Exercises

4. What does `dim()` return when applied to a 1-dimensional vector?
5. When might you use `NROW()` or `NCOL()`?
6. How would you describe the following three objects? What makes them different from `1:5`?

   ```{r}
   x1 <- array(1:5, c(1, 1, 5))
   x2 <- array(1:5, c(1, 5, 1))
   x3 <- array(1:5, c(5, 1, 1))
   ```

## S3 atomic vectors

* `class` is a vector attribute.
* It turns object into __S3 object__.
* Four important S3 vectors:

  * **factor** vectors.
  * **Date** vectors with day resolution.
  * **POSIXct** vectors for date-times.
  * **difftime** vectors for durations.

\placefig{10}{2}{width=6cm}{../diagrams/vectors/summary-tree-s3-1.png}

## Factors

* A vector that can contain only predefined values.
* Used to store categorical data.
* Built on top of an integer vector with two attributes: a `class`, "factor", and `levels`, which defines the set of allowed values.

```{r}
x <- factor(c("a", "b", "b", "a"))
x
```

## Factors

```{r}
typeof(x)
attributes(x)
```

\placefig{10}{2}{width=5cm}{../diagrams/vectors/factor.png}

## Factors

```{r}
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))

table(sex_char)
table(sex_factor)
```

## Factors

* Be careful: some functions convert factors to integers!
* ggplot preserves ordering of levels in graphs -- useful to reorder panels or legends.
* Ordered factors are useful when the order of levels is meaningful.

```{r}
grade <- ordered(c("b", "b", "a", "c"), levels = c("c", "b", "a"))
grade
```

## Dates

* Date vectors are built on top of double vectors.
* Class "Date" with no other attributes:

```{r}
today <- Sys.Date()

typeof(today)
attributes(today)
```

## Dates

The value of the double (which can be seen by stripping the class), represents the number of days since 1970-01-01 (the "Unix Epoch").

```{r}
date <- as.Date("1970-02-01")
unclass(date)
```

## Date-times

* Base R provides two ways of storing date-time information, POSIXct, and POSIXlt.
* "POSIX" is short for Portable Operating System Interface
* "ct" stands for calendar time; "lt" for local time
* POSIXct vectors are built on top of double vectors, where the value represents the number of seconds since 1970-01-01.

```{r}
now_ct <- as.POSIXct("2018-08-01 22:00", tz = "UTC")
now_ct

typeof(now_ct)
attributes(now_ct)
```

## Date-times

The `tzone` attribute controls only how the date-time is formatted; it does not control the instant of time represented by the vector. Note that the time is not printed if it is midnight.

\fontsize{10}{10}\sf

```{r}
structure(now_ct, tzone = "Asia/Tokyo")
structure(now_ct, tzone = "America/New_York")
structure(now_ct, tzone = "Australia/Lord_Howe")
```


## Exercises

7. What sort of object does `table()` return? What is its type? What
    attributes does it have? How does the dimensionality change as you
    tabulate more variables?

8. What happens to a factor when you modify its levels?

   ```{r, results = FALSE}
   f1 <- factor(letters)
   levels(f1) <- rev(levels(f1))
   ```

9. What does this code do? How do `f2` and `f3` differ from `f1`?

   ```{r, results = FALSE}
   f2 <- rev(factor(letters))
   f3 <- factor(letters, levels = rev(letters))
   ```

# Lists and data frames
## Lists

* More complex than atomic vectors
* Elements are *references* to objects of any type

\fontsize{10}{10}\sf

```{r}
l1 <- list(
  1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9)
)
typeof(l1)
str(l1)
```

\placefig{10}{3.5}{width=5cm}{../diagrams/vectors/list.png}

## Lists

* Lists can be recursive:  a list can contain other lists.

```{r}
l3 <- list(list(list(1)))
str(l3)
```

\placefig{10}{4}{width=5cm}{../diagrams/vectors/list-recursive.png}

## Lists

* `c()` will combine several lists into one.

\fontsize{9}{9}\sf

```{r}
l4 <- list(list(1, 2), c(3, 4))
l5 <- c(list(1, 2), c(3, 4))
str(l4)
str(l5)
```

\placefig{10}{3}{width=5cm}{../diagrams/vectors/list-c.png}

## Testing and coercion {#list-types}

\fontsize{9}{9}\sf

```{r}
list(1:3)
as.list(1:3)
```

\fontsize{13}{14}\sf

* You can turn a list into an atomic vector with `unlist()`.

## Data frames and tibbles {#tibble}
\vspace*{-0.2cm}
\placefig{12.2}{0.35}{width=3cm}{../diagrams/vectors/summary-tree-s3-2.png}

* Most important S3 vectors built on lists:\newline data frames and tibbles.

\fontsize{10}{8}\sf

```{r}
df1 <- data.frame(x = 1:3, y = letters[1:3])
typeof(df1)
attributes(df1)
```


\placefig{5.5}{5.5}{width=2.5cm}{../diagrams/vectors/data-frame-2.png}


## Data frames and tibbles

* A data frame has a constraint: the length of each of its vectors must be the same.
* A data frame has `rownames()` and `colnames()`. The `names()`
  of a data frame are the column names.
* A data frame has `nrow()` rows and `ncol()` columns. The `length()` of a
  data frame gives the number of columns.

## Tibbles
\fontsize{13}{14}\sf

* Modern reimagining of the data frame.
* tibbles are "lazy and surly": they do less and complain more.

\fontsize{10}{8}\sf

```{r}
library(tibble)
df2 <- tibble(x = 1:3, y = letters[1:3])
typeof(df2)
attributes(df2)
```


## Creating data frames and tibbles

```{r}
names(data.frame(`1` = 1))

names(tibble(`1` = 1))
```

## Creating data frames and tibbles

\fontsize{10}{10}\sf

```{r, error = TRUE}
data.frame(x = 1:4, y = 1:2)
tibble(x = 1:4, y = 1:2)
```

## Creating data frames and tibbles
\fontsize{10}{10}\sf

```{r}
tibble(
  x = 1:3,
  y = x * 2,
  z = 5
)
```


## Row names {#rownames}

Data frames allow you to label each row with a name, a character vector containing only unique values:

\fontsize{10}{10}\sf

```{r}
df3 <- data.frame(
  age = c(35, 27, 18),
  hair = c("blond", "brown", "black"),
  row.names = c("Bob", "Susan", "Sam")
)
df3
```

## Row names

* tibbles do not support row names
* convert row names into a regular column with either `rownames_to_column()`, or the `rownames` argument:

\fontsize{10}{10}\sf

```{r}
as_tibble(df3, rownames = "name")
```

## Printing

\fontsize{10}{9.5}\sf

```{r}
dplyr::starwars
```

## Printing

* Tibbles only show first 10 rows and all columns that fit on
  screen. Additional columns shown at bottom.
* Each column labelled with its type, abbreviated to 3--4 letters.
* Wide columns truncated.

## List columns

\fontsize{10}{10}\sf

```{r}
df <- data.frame(x = 1:3)
df$y <- list(1:2, 1:3, 1:4)
df
```

\placefig{10}{1.5}{width=5cm}{../diagrams/vectors/data-frame-list.png}


```{r}
tibble(
  x = 1:3,
  y = list(1:2, 1:3, 1:4)
)
```

## Matrix and data frame columns

```{r}
dfm <- tibble(
  x = 1:3 * 10,
  y = matrix(1:9, nrow = 3),
  z = data.frame(a = 3:1, b = letters[1:3])
)
str(dfm)
```

\placefig{10}{1.25}{width=5cm}{../diagrams/vectors/data-frame-matrix.png}

## Exercises

10.  What happens if you attempt to set rownames that are not unique?
11.  If `df` is a data frame, what can you say about `t(df)`, and `t(t(df))`?
    Perform some experiments, making sure to try different column types.
12.  What does `as.matrix()` do when applied to a data frame with
    columns of different types? How does it differ from `data.matrix()`?

## `NULL`

```{r, error = TRUE}
length(NULL)
```

You can test for `NULL`s with `is.null()`:

```{r}
x <- NULL
x == NULL
is.null(x)
```

# Subsetting

## Exercises

13. What is the result of subsetting a vector with positive integers, negative integers, a logical vector, or a character vector?
14. What's the difference between `[`, `[[`, and `$` when applied to a list?
15. When should you use `drop = FALSE`?

## Exercises
\fontsize{13}{14}\sf

16. Fix each of the following common data frame subsetting errors:

    ```{r, eval = FALSE}
    mtcars[mtcars$cyl = 4, ]
    mtcars[-1:4, ]
    mtcars[mtcars$cyl <= 5]
    mtcars[mtcars$cyl == 4 | 6, ]
    ```

17. Extract the residual degrees of freedom from `mod`

    ```{r}
    #| eval: false
    mod <- lm(mpg ~ wt, data = mtcars)
    ```

18. Extract the R squared from the model summary (`summary(mod)`)

## Exercises

19. How would you randomly permute the columns of a data frame?

20. How would you select a random sample of m rows from a data frame? What if the sample had to be contiguous (i.e., with an initial row, a final row, and every row in between)?

21. How could you put the columns in a data frame in alphabetical order?

# Functions

## Function fundamentals

* Almost all functions can be broken down into three components: arguments, body, and environment.

  * The `formals()`, the list of arguments that control how you call the function.
  * The `body()`, the code inside the function.
  * The `environment()`, the data structure that determines how the function finds the values associated with the names.

* Functions are objects and have attributes.

## Function components
\fontsize{10}{5}\sf

```{r}
f02 <- function(x, y) {
  # A comment
  x + y
}
formals(f02)
body(f02)
environment(f02)
```

## Invoking a function
\fontsize{10}{10}\sf

```{r}
mean(1:10, na.rm = TRUE)
mean(, TRUE, x = 1:10)
args <- list(1:10, na.rm = TRUE)
do.call(mean, args)
```

## Function composition {#function-composition}
\fontsize{13}{15}\sf

```{r}
square <- function(x) { x^2 }
deviation <- function(x) { x - mean(x) }
x <- runif(100)
```

:::: {.columns}
::: {.column width="50%"}

Nesting:

```{r}
sqrt(mean(square(deviation(x))))
```

Intermediate variables:

```{r}
out <- deviation(x)
out <- square(out)
out <- mean(out)
out <- sqrt(out)
out
```
:::

::: {.column width="50%"}

Pipe:

```{r}
x |>
  deviation() |>
  square() |>
  mean() |>
  sqrt()
```

:::
::::

## Lexical scoping {#lexical-scoping}

Names defined inside a function mask names defined outside a function.

\fontsize{10}{10}\sf

```{r}
x <- 10
y <- 20
g02 <- function() {
  x <- 1
  y <- 2
  c(x, y)
}
g02()
```

## Lexical scoping

Names defined inside a function mask names defined outside a function.

\fontsize{10}{10}\sf

```{r}
x <- 2
g03 <- function() {
  y <- 1
  c(x, y)
}
g03()

# And this doesn't change the previous value of y
y
```

## Lexical scoping

Names defined inside a function mask names defined outside a function.

\fontsize{10}{10}\sf

```{r}
x <- 1
g04 <- function() {
  y <- 2
  i <- function() {
    z <- 3
    c(x, y, z)
  }
  i()
}
g04()
```

## Functions versus variables
\fontsize{10}{10}\sf

```{r}
g07 <- function(x) { x + 1 }
g08 <- function() {
  g07 <- function(x) { x + 100 }
  g07(10)
}
g08()
```

```{r}
g09 <- function(x) { x + 100 }
g10 <- function() {
  g09 <- 10
  g09(g09)
}
g10()
```


## A fresh start {#fresh-start}

What happens to values between invocations of a function?

```{r}
#| echo: false
rm(a)
```

\fontsize{10}{9}\sf


```{r}
g11 <- function() {
  if (!exists("a")) {
    a <- 1
  } else {
    a <- a + 1
  }
  a
}

g11()
g11()
```

## Dynamic lookup
\fontsize{10}{10}\sf

```{r}
g12 <- function() { x + 1 }
x <- 15
g12()

x <- 20
g12()
```

```{r}
codetools::findGlobals(g12)
```

\pause\alert{It is good practice to pass all the inputs to a function as arguments.}

## Lazy evaluation {#lazy-evaluation}

This code doesn't generate an error because `x` is never used:

```{r}
h01 <- function(x) {
  10
}
h01(stop("This is an error!"))
```

## Promises
\fontsize{13}{14}\sf

Lazy evaluation is powered by a data structure called a __promise__.

A promise has three components:

*   An expression, like `x + y`, which gives rise to the delayed computation.

*   An environment where the expression should be evaluated

*   A value, which is computed and cached the first time a promise is
    accessed when the expression is evaluated in the specified environment.

## Promises
\fontsize{10}{10}\sf

```{r}
y <- 10
h02 <- function(x) {
  y <- 100
  x + 1
}
h02(y)
```

## Promises
\fontsize{10}{10}\sf

```{r}
#| message: true
double <- function(x) {
  message("Calculating...")
  x * 2
}
h03 <- function(x) {
  c(x, x)
}
h03(double(20))
```

\pause\fontsize{13}{15}\sf

Promises are like a quantum state: any attempt to inspect them with R code will force an immediate evaluation, making the promise disappear.

## Default arguments

Thanks to lazy evaluation, default values can be defined in terms of other arguments, or even in terms of variables defined later in the function:

\fontsize{10}{10}\sf

```{r}
h04 <- function(x = 1, y = x * 2, z = a + b) {
  a <- 10
  b <- 100
  c(x, y, z)
}
h04()
```

\pause\alert{Not recommended!}

## `...`  (dot-dot-dot) {#fun-dot-dot-dot}

Allows for any number of additional arguments.

You can use `...` to pass additional arguments to another function.
\fontsize{10}{10}\sf

```{r}
i01 <- function(y, z) {
  list(y = y, z = z)
}
i02 <- function(x, ...) {
  i01(...)
}
str(i02(x = 1, y = 2, z = 3))
```

## `...`  (dot-dot-dot)

`list(...)` evaluates the arguments and stores them in a list:\fontsize{10}{10}\sf


```{r}
i04 <- function(...) {
  list(...)
}
str(i04(a = 1, b = 2))
```

## `...`  (dot-dot-dot)
\fontsize{13}{14}\sf

*   Allows you to pass arguments to a function called within your function, without having to list them all explicitly.

\pause\alert{Two downsides:}

*   When you use it to pass arguments to another function, you have to
    carefully explain to the user where those arguments go.
*   A misspelled argument will not raise an error. This makes it easy for
    typos to go unnoticed:

\fontsize{10}{5}\sf

```{r}
sum(1, 2, NA, na_rm = TRUE)
```

## Exercises

22. Explain the following results: \fontsize{10}{10}\sf

    ```{r}
    sum(1, 2, 3)
    mean(1, 2, 3)

    sum(1, 2, 3, na.omit = TRUE)
    mean(1, 2, 3, na.omit = TRUE)
    ```


## Exiting a function

Most functions exit in one of two ways:

* return a value, indicating success
* throw an error, indicating failure.

## Implicit versus explicit returns

Implicit return, where the last evaluated expression is the return value:

\fontsize{10}{5}\sf

```{r}
j01 <- function(x) {
  if (x < 10) {
    0
  } else {
    10
  }
}
j01(5)
j01(15)
```

## Implicit versus explicit returns

Explicit return, by calling `return()`:

\fontsize{10}{5}\sf

```{r}
j02 <- function(x) {
  if (x < 10) {
    return(0)
  } else {
    return(10)
  }
}
j02(5)
j02(15)
```

## Invisible values {#invisible}

Most functions return visibly: calling the function in an interactive context prints the result.

```{r}
j03 <- function() { 1 }
j03()
```

However, you can prevent automatic printing by applying `invisible()` to the last value:

```{r}
j04 <- function() { invisible(1) }
j04()
```

## Invisible values {#invisible2}

The most common function that returns invisibly is `<-`:

```{r}
a <- 2
(a <- 2)
```

This is what makes it possible to chain assignments:

```{r}
a <- b <- c <- d <- 2
```

In general, any function called primarily for a side effect (like `<-`, `print()`, or `plot()`) should return an invisible value (typically the value of the first argument).

## Errors

If a function cannot complete its assigned task, it should throw an error with `stop()`, which immediately terminates the execution of the function.

\fontsize{10}{10}\sf

```{r, error = TRUE}
j05 <- function() {
  stop("I'm an error")
  return(10)
}
j05()
```



## Function forms

###
> To understand computations in R, two slogans are helpful:
>
> * Everything that exists is an object.
> * Everything that happens is a function call.
>
> --- John Chambers

## Function forms

* __prefix__: the function name comes before its arguments, like
  `foofy(a, b, c)`.
* __infix__: the function name comes in between its arguments, like
  `x + y`.
* __replacement__: functions that replace values by assignment, like
  `names(df) <- c("a", "b", "c")`.
* __special__: functions like `[[`, `if`, and `for`.

## Rewriting to prefix form {#prefix-transform}

Everything can be written in prefix form.

```{r, eval = FALSE}
x + y
`+`(x, y)

names(df) <- c("x", "y", "z")
`names<-`(df, c("x", "y", "z"))

for(i in 1:10) print(i)
`for`(i, 1:10, print(i))
```

## Don't be evil!

```{r}
`(` <- function(e1) {
  if (is.numeric(e1) && runif(1) < 0.1) {
    e1 + 1
  } else {
    e1
  }
}
replicate(50, (1 + 2))
```

```{r}
#| echo: false
rm("(")
```

## Prefix form {#prefix-form}

You can specify arguments in three ways:

* By position, like `help(mean)`.
* By name, like `help(topic = mean)`.
* Using partial matching, like `help(top = mean)`.

## Exercises

23. Clarify the following list of odd function calls:

    ```{r, eval = FALSE}
    x <- sample(replace = TRUE, 20, x = c(1:10, NA))
    y <- runif(min = 0, max = 1, 20)
    cor(m = "k", y = y, u = "p", x = x)
    ```

## Infix functions

Functions with 2 arguments, and the function name comes between the arguments:

 `:`, `::`, `:::`, `$`, `@`, `^`, `*`, `/`, `+`, `-`, `>`, `>=`, `<`, `<=`, `==`, `!=`, `!`, `&`, `&&`, `|`, `||`, `~`, `<-`, and `<<-`.

```{r}
1 + 2
`+`(1, 2)
```

## Infix functions

You can also create your own infix functions that start and end with `%`.

```{r}
`%+%` <- function(a, b) paste0(a, b)
"new " %+% "string"
```

## Replacement functions {#replacement-functions}

* Replacement functions act like they modify their arguments in place, and have the special name `xxx<-`.
* They must have arguments named `x` and `value`, and must return the modified object.

```{r}
`second<-` <- function(x, value) {
  x[2] <- value
  x
}
x <- 1:10
second(x) <- 5L
x
```

## Replacement functions

```{r}
`modify<-` <- function(x, position, value) {
  x[position] <- value
  x
}
modify(x, 1) <- 10
x
```

When you write `modify(x, 1) <- 10`, behind the scenes R turns it into:

```{r, eval = FALSE}
x <- `modify<-`(x, 1, 10)
```

# Environments

## Environment basics

Environments are data structures that power scoping.

An environment is similar to a named list, with four important exceptions:

* Every name must be unique.
* The names in an environment are not ordered.
* An environment has a parent.
* Environments are not copied when modified.

## Environment basics

```{r}
library(rlang)
e1 <- env(
  a = FALSE,
  b = "a",
  c = 2.3,
  d = 1:3,
)
```

\placefig{8}{1.9}{width=7cm}{../diagrams/environments/bindings.png}

### Special environments

* The **current environment** is the environment in which code is currently executing.
* The **global environment** is where all interactive computation takes place. Your "workspace".

## Parent environments

:::: {.columns}
::: {.column width="50%"}

* Every environment has a parent.
* If a name is not found in an environment, R looks in the parent environment.
* The ancestors of the global environment include every attached package.

:::
::: {.column width="50%"}
\fontsize{10}{10}\sf\vspace*{-0.3cm}

```{r}
env_parents(e1, last = empty_env())
```
:::
::::

## Super assignment

* Regular assignment (`<-`) creates a variable in the current environment.
* Super assignment (`<<-`) modifies a variable in a parent environment.
* If it can't find an existing variable, it creates one in the global environment.

## Package environments
\fontsize{13}{15}\sf

* Every package attached becomes one of the parents of the global environment (in order of attachment).\fontsize{10}{10}\sf

  ```{r}
  search()
  ```

\fontsize{13}{15}\sf

* Attaching a package changes the parent of the global environment.
* `Autoloads` uses delayed bindings to save memory by only loading package objects when needed.

## Function environments
\fontsize{13}{14}\sf

A function binds the current environment when it is created.

\fontsize{10}{10}\sf

```{r}
y <- 1
f <- function(x) {
  env_print(current_env())
  x + y
}
f(2)
```

## Namespaces
\fontsize{13}{14}\sf

* Package environment: how an R user finds a function in an attached package (only includes exports)
* Namespace environment: how a package finds its own objects (includes non-exports as well)
* Each namespace environment has an imports environment (controlled via NAMESPACE file).

```{r}
#| echo: false
knitr::include_graphics("../diagrams/environments/namespace-env.png")
```

## Caller environments
\fontsize{10}{10}\sf

```{r}
f <- function(x) {
  g(x = 2)
}
g <- function(x) {
  h(x = 3)
}
h <- function(x) {
  stop()
}
```

```{r, eval = FALSE}
f(x = 1)
#> Error: in h(x = 3)
traceback()
#> 4: stop() at #3
#> 3: h(x = 3) at #3
#> 2: g(x = 2) at #3
#> 1: f(x = 1)
```

## Lazy evaluation

```{r, eval = FALSE}
a <- function(x) b(x)
b <- function(x) c(x)
c <- function(x) x
a(f())
#> Error: in h(x = 3)
traceback()
#> 7: stop() at #3
#> 6: h(x = 3) at #3
#> 5: g(x = 2) at #3
#> 4: f() at #1
#> 3: c(x) at #1
#> 2: b(x) at #1
#> 1: a(f())
unused argument (clas
```


# Conditions

## Conditions

```r
message("This is what a message looks like")
#> This is what a message looks like

warning("This is what a warning looks like")
#> Warning: This is what a warning looks like

stop("This is what an error looks like")
#> Error in eval(expr, envir, enclos): This is what an error looks like
```

\pause

* Ignore messages with `suppressMessages()`.
* Ignore warnings with `suppressWarnings()`.
* Ignore errors with `try()`.

## try()

* Allows execution to continue even if an error occurs.
* Returns a special object that captures the error.

\fontsize{10}{10}\sf

:::: {.columns}
::: {.column width="50%"}

```{r, error = TRUE}
f1 <- function(x) {
  log(x)
  10
}
f1("x")
```

:::
::: {.column width="50%"}

```{r, error = TRUE}
f2 <- function(x) {
  try(log(x))
  10
}
f2("a")
```

:::
::::

## Handling conditions
\fontsize{13}{15}\sf

Allow you to specify what should happen when a condition occurs.

```{r, eval = FALSE}
tryCatch(
  error = function(cnd) {
    # code to run when error is thrown
  },
  code_to_run_while_handlers_are_active
)
withCallingHandlers(
  warning = function(cnd) {
    # code to run when warning is signalled
  },
  message = function(cnd) {
    # code to run when message is signalled
  },
  code_to_run_while_handlers_are_active
)
```

## tryCatch()
\fontsize{10}{10}\sf

```{r}
f3 <- function(x) {
  tryCatch(
    error = function(cnd) NA,
    log(x)
  )
}

f3("x")
```


## withCallingHandlers()
\fontsize{10}{10}\sf

```{r}
f4 <- function(x) {
  withCallingHandlers(
    warning = function(cnd) cat("How did this happen?\n"),
    log(x)
  )
}

f4(-1)
```


## Exercise

24. Explain the results of running the following code

```{r, eval = FALSE}
show_condition <- function(code) {
  tryCatch(
    error = function(cnd) "error",
    warning = function(cnd) "warning",
    message = function(cnd) "message",
    {
      code
      5
    }
  )
}
show_condition(stop("!"))
show_condition(10)
show_condition(warning("?!"))
```

## Activity

Write a function to take a single integer input and return:

* `fizz` if the number is divisible by 5
* `buzz` if the number is divisible by 7
* `fizzbuzz` if the number is divisible by both 5 and 7
* the number otherwise

Your function should contain a `stop()` if the input is not an integer.

## Assignment 1
\fontsize{12}{13.5}\sf

A supermarket has `p` checkouts and customers must choose one, forming a queue if it is already occupied. Customers always choose the shortest queue. The time between each new customer arriving at the checkouts has an exponential distribution with mean $\mu$ minutes. The time it takes for a checkout operator to process a customer has an independent exponential distribution with mean $\lambda$ minutes.

Write an R function to simulate the supermarket queues at each checkout, taking the arguments `mu`, `lambda`, `p` and `n`, and returning the total number of customers waiting to be served, `n` minutes after the supermarket opens. The argument `p` should have default value 3, while `n` should have default value `720` (the number of minutes in a 12 hour day). The other arguments should have no default values. Your function should be named `remaining_customers`.

Your code should be as efficient as possible. Arguments should be checked for range and class.
